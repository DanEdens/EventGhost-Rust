@startuml EventGhost Rust Architecture
!theme cerulean
skinparam packageStyle rectangle
skinparam componentStyle uml2
skinparam defaultFontName Arial
skinparam ArrowColor #0066CC
skinparam packageBackgroundColor #F5F5F5

' Overall architecture diagram of the EventGhost-Rust project

title EventGhost-Rust: Overall Architecture

' Define main packages
package "Core" as Core #DEEAEE {
    [Error] as CoreError #F47174 
    [Event] as CoreEvent #A0D6B4
    [Plugin] as CorePlugin #A0D6B4
    [PluginRegistry] as CorePluginRegistry #A0D6B4
    [ConfigManager] as CoreConfigManager #F8B195
    
    package "Actions" as Actions #D5E5F2 {
        [FileOperations] as FileOps
        [System] as SystemActions
        [Network] as NetworkActions
    }

    note right of CoreEvent
      Events are the core messaging mechanism
      that flow through the application and
      can be generated by plugins or user actions
    end note
}

package "EG (EventGhost)" as EG #E3F2FD {
    [Config] as EGConfig #F8B195
    [MainFrame] as EGMainFrame #A0D6B4
    [LogCtrl] as EGLogCtrl #A0D6B4
    
    package "Classes" as Classes #D5E5F2 {
        [ConfigView] as ClassConfigView #A0D6B4
        [Dialog] as ClassDialog #A0D6B4
        [ConfigDialogs] as ClassConfigDialogs #A0D6B4
        [DragDrop] as ClassDragDrop #A0D6B4
        [TreeCtrl] as ClassTreeCtrl #A0D6B4
        [Menu] as ClassMenu #A0D6B4
    }
    
    package "Prelude" as Prelude #D5E5F2 {
        [GTK Imports] as GTKImports
        [Common Traits] as CommonTraits
        [Common Types] as CommonTypes
    }
    
    package "Dialogs" as Dialogs #D5E5F2 {
        [ConfigFileDialog] as DialogConfigFile
    }

    note right of EGMainFrame
      Application entry point that
      initializes the UI and connects
      the core components
    end note
}

package "Utils" as Utils #E8F5E9 {
    [Path] as UtilsPath
    [GTK Utils] as UtilsGTK
}

package "CLI" as CLI #FFF9C4 {
    [Commands] as CLICommands
}

' Define relationships
Core --> EG : provides core functionality
EG --> Utils : uses utilities
CLI --> Core : interacts with
EG --> Core : depends on

EGMainFrame --> ClassConfigView : contains
EGMainFrame --> EGLogCtrl : contains
EGMainFrame --> ClassMenu : contains

ClassConfigView --> EGConfig : manipulates
ClassConfigView --> ClassDialog : uses
ClassConfigView --> ClassDragDrop : implements

ClassConfigDialogs --> ClassDialog : extends

Core ..> Prelude : imports from
EG ..> Prelude : imports from
Utils ..> Prelude : imports from

UtilsPath --> CoreError : returns
UtilsGTK --> CoreError : returns

EGConfig --> CoreConfigManager : uses
CorePlugin --> CoreEvent : processes
CorePluginRegistry --> CorePlugin : manages

' Color legend
legend right
  |= Component Type |= Description |
  |<#A0D6B4>| UI Components |
  |<#F8B195>| Configuration Management |
  |<#F47174>| Error Handling |
  |<#D5E5F2>| Support Modules |
endlegend

' Note about prelude pattern
note bottom of Prelude
  The prelude module centralizes common imports,
  particularly GTK components and traits,
  simplifying module imports across the codebase.
  Uses: use crate::prelude::*;
end note

' Note about RefCell pattern
note right of ClassConfigView
  Classes use Rc<RefCell<>> pattern 
  for shared mutable state between
  GTK components. This enables interior 
  mutability with shared ownership.
  Key pattern: clone() before borrow().
end note

' Note about Error handling
note bottom of CoreError
  Centralized error handling with custom
  error types that implement std::error::Error.
  All components return Result<T, Error> for
  consistent error propagation.
end note

' Data flow
note top of Core
  Data Flow: Events → Plugins → Actions → UI
  Config is shared across all components
end note

@enduml 