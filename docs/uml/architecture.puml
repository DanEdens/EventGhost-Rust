@startuml EventGhost Rust Architecture
!theme cerulean
skinparam packageStyle rectangle
skinparam componentStyle uml2
skinparam defaultFontName Arial
skinparam ArrowColor #0056B3
skinparam packageBackgroundColor #FFFFFF
skinparam NoteBackgroundColor #E2F0FF
skinparam NoteBorderColor #5B9BD5
skinparam ClassFontColor #000000
skinparam NoteTextColor #000000

' Overall architecture diagram of the EventGhost-Rust project

title EventGhost-Rust: Overall Architecture

' Define main packages
package "Core" as Core #F0F7FF {
    [Error] as CoreError #FFD9D9
    [Event] as CoreEvent #D4EDDA
    [Plugin] as CorePlugin #D4EDDA
    [PluginRegistry] as CorePluginRegistry #D4EDDA
    [ConfigManager] as CoreConfigManager #FFE8D6
    
    package "Actions" as Actions #F8F9FA {
        [FileOperations] as FileOps #E2F0FF
        [System] as SystemActions #E2F0FF
        [Network] as NetworkActions #E2F0FF
    }

    note right of CoreEvent
      Events are the core messaging mechanism
      that flow through the application and
      can be generated by plugins or user actions
    end note
}

package "EG (EventGhost)" as EG #F0F7FF {
    [Config] as EGConfig #FFE8D6
    [MainFrame] as EGMainFrame #D4EDDA
    [LogCtrl] as EGLogCtrl #D4EDDA
    
    package "Classes" as Classes #F8F9FA {
        [ConfigView] as ClassConfigView #D4EDDA
        [Dialog] as ClassDialog #D4EDDA
        [ConfigDialogs] as ClassConfigDialogs #D4EDDA
        [DragDrop] as ClassDragDrop #D4EDDA
        [TreeCtrl] as ClassTreeCtrl #D4EDDA
        [Menu] as ClassMenu #D4EDDA
    }
    
    package "Prelude" as Prelude #F8F9FA {
        [GTK Imports] as GTKImports #E2F0FF
        [Common Traits] as CommonTraits #E2F0FF
        [Common Types] as CommonTypes #E2F0FF
    }
    
    package "Dialogs" as Dialogs #F8F9FA {
        [ConfigFileDialog] as DialogConfigFile #E2F0FF
    }

    note right of EGMainFrame
      Application entry point that
      initializes the UI and connects
      the core components
    end note
}

package "Utils" as Utils #F0F7FF {
    [Path] as UtilsPath #E2F0FF
    [GTK Utils] as UtilsGTK #E2F0FF
}

package "CLI" as CLI #F0F7FF {
    [Commands] as CLICommands #E2F0FF
}

' Define relationships
Core --> EG : provides core functionality
EG --> Utils : uses utilities
CLI --> Core : interacts with
EG --> Core : depends on

EGMainFrame --> ClassConfigView : contains
EGMainFrame --> EGLogCtrl : contains
EGMainFrame --> ClassMenu : contains

ClassConfigView --> EGConfig : manipulates
ClassConfigView --> ClassDialog : uses
ClassConfigView --> ClassDragDrop : implements

ClassConfigDialogs --> ClassDialog : extends

Core ..> Prelude : imports from
EG ..> Prelude : imports from
Utils ..> Prelude : imports from

UtilsPath --> CoreError : returns
UtilsGTK --> CoreError : returns

EGConfig --> CoreConfigManager : uses
CorePlugin --> CoreEvent : processes
CorePluginRegistry --> CorePlugin : manages

' Color legend
legend right
  |= Component Type |= Description |
  |<#D4EDDA>| UI Components |
  |<#FFE8D6>| Configuration Management |
  |<#FFD9D9>| Error Handling |
  |<#E2F0FF>| Support Modules |
endlegend

' Note about prelude pattern
note bottom of Prelude
  The prelude module centralizes common imports,
  particularly GTK components and traits,
  simplifying module imports across the codebase.
  Uses: use crate::prelude::*;
end note

' Note about RefCell pattern
note right of ClassConfigView
  Classes use Rc<RefCell<>> pattern 
  for shared mutable state between
  GTK components. This enables interior 
  mutability with shared ownership.
  Key pattern: clone() before borrow().
end note

' Note about Error handling
note bottom of CoreError
  Centralized error handling with custom
  error types that implement std::error::Error.
  All components return Result<T, Error> for
  consistent error propagation.
end note

' Data flow
note top of Core
  Data Flow: Events → Plugins → Actions → UI
  Config is shared across all components
end note

@enduml 