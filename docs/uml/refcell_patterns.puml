@startuml RefCell_Patterns

title "RefCell Borrowing Patterns"

class "Component" as Component {
  config: Rc<RefCell<Config>>
  window: Rc<RefCell<Window>>
  + get_config(): Rc<RefCell<Config>>
  + get_window(): Rc<RefCell<Window>>
  + use_config()
}

class "Config" as Config {
  items: Vec<Item>
  + add_item(item: Item)
  + get_items(): &[Item]
}

Component --> Config : references

note top of Component
  <b>Interior Mutability Pattern</b>
  - RefCell<T> allows mutable borrows checked at runtime
  - Rc<RefCell<T>> enables multiple owners with mutable access
  - Trade-off: Compile-time guarantees for runtime checks
end note

note right of Component::use_config
  <b>Safe Pattern</b>
  // Clone the Rc first
  let config = self.config.clone();
  
  // Then borrow the RefCell contents
  let config_ref = config.borrow();
  
  // Now use config_ref safely
  for item in config_ref.get_items() {
    println!("{:?}", item);
  }
end note

note bottom of Config
  <b>Runtime Borrowing Rules</b>
  - Multiple shared borrows (borrow()) allowed
  - Only one mutable borrow (borrow_mut()) allowed
  - Can't have shared + mutable borrows simultaneously
  - Violating rules causes runtime panic
end note

@enduml 