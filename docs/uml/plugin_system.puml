@startuml EventGhost Plugin System
!theme cerulean
skinparam classAttributeIconSize 0
skinparam classFontStyle bold
skinparam classBackgroundColor #FEFEFE
skinparam classBorderColor #63B175
skinparam InterfaceBackgroundColor #B8E6B8
skinparam EnumBackgroundColor #F2DFCE
skinparam ArrowColor #0066CC
skinparam packageBackgroundColor #F5F5F5

' Plugin System architecture of the EventGhost-Rust project

title EventGhost-Rust: Plugin System Architecture

' Define main components of the plugin system

interface Plugin #B8E6B8 {
  +get_name(): &str
  +get_description(): &str
  +get_version(): &str
  +get_author(): &str
  +get_info(): PluginInfo
  +get_capabilities(): Vec<PluginCapability>
  +get_state(): PluginState
  +initialize(): Result<(), PluginError>
  +start(): Result<(), PluginError>
  +stop(): Result<(), PluginError>
  +handle_event(event: &dyn Event): Result<(), PluginError>
  +get_config(): Option<&Config>
  +update_config(config: Config): Result<(), PluginError>
  +as_any(): &dyn Any
  +clone_box(): Box<dyn Plugin>
}

enum PluginState #F2DFCE {
  Uninitialized
  Initialized
  Running
  Stopped
  Error
}

enum PluginCapability #F2DFCE {
  ReceivesEvents
  GeneratesEvents
  HasConfig
  HasUI
  SystemIntegration
  NetworkAccess
}

class PluginInfo #E6F7FF {
  +name: String
  +description: String
  +version: String
  +author: String
  +website: Option<String>
  +icon: Option<String>
  +capabilities: Vec<PluginCapability>
}

class PluginRegistry #A0D6B4 {
  -plugins: HashMap<String, Arc<dyn Plugin>>
  -event_listeners: Vec<Arc<dyn Plugin>>
  -config_manager: Arc<ConfigManager>
  +new(): Self
  +register(plugin: Arc<dyn Plugin>): Result<(), PluginError>
  +unregister(name: &str): Result<(), PluginError>
  +get(name: &str): Option<Arc<dyn Plugin>>
  +get_all(): Vec<Arc<dyn Plugin>>
  +initialize_all(): Result<(), PluginError>
  +start_all(): Result<(), PluginError>
  +stop_all(): Result<(), PluginError>
  +dispatch_event(event: &dyn Event): Result<(), PluginError>
  +save_plugin_configs(): Result<(), PluginError>
}

class PluginLoader #A0D6B4 {
  -plugin_directories: Vec<PathBuf>
  -registry: Arc<PluginRegistry>
  +new(registry: Arc<PluginRegistry>): Self
  +add_plugin_directory(dir: PathBuf)
  +load_plugin(path: &Path): Result<Arc<dyn Plugin>, PluginError>
  +load_plugins_from_directory(dir: &Path): Result<Vec<Arc<dyn Plugin>>, PluginError>
  +discover_plugins(): Result<Vec<Arc<dyn Plugin>>, PluginError>
  +reload_plugin(name: &str): Result<Arc<dyn Plugin>, PluginError>
}

interface Event #B8E6B8 {
  +get_id(): &str
  +get_type(): EventType
  +get_payload(): &EventPayload
  +get_timestamp(): DateTime<Local>
  +get_source(): Option<&str>
  +as_any(): &dyn Any
  +as_any_mut(): &mut dyn Any
  +clone_event(): Box<dyn Event + Send + Sync>
}

interface Action #B8E6B8 {
  +get_id(): Uuid
  +get_name(): &str
  +get_description(): &str
  +get_supported_event_types(): Vec<EventType>
  +get_plugin(): Arc<dyn Plugin>
  +get_icon_path(): Option<String>
  +is_configurable(): bool
  +configure(config: ActionConfig): Result<(), Error>
  +execute(event: &dyn Event): Result<ActionResult, Error>
  +validate(): Result<(), Error>
  +as_any(): &dyn Any
}

class EventPayload #E6F7FF {
  +data: HashMap<String, Value>
  +new(): Self
  +with_data(key: &str, value: Value): Self
  +get(&self, key: &str): Option<&Value>
  +set(&mut self, key: &str, value: Value)
  +merge(&mut self, other: &EventPayload)
  +as_json(): Result<String, Error>
  +from_json(json: &str): Result<Self, Error>
}

enum EventType #F2DFCE {
  Button
  Keyboard
  Mouse
  System
  Network
  Timer
  Custom
}

class FileOperationsAction #A0D6B4 {
  -id: Uuid
  -plugin: Arc<dyn Plugin>
  -config: FileOperationsConfig
  +new(plugin: Arc<dyn Plugin>): Self
  +with_id(id: Uuid, plugin: Arc<dyn Plugin>): Self
  +with_operation(operation: FileOperation): Self
  +execute(event: &dyn Event): Result<ActionResult, Error>
  +validate_paths(): Result<(), Error>
  +handle_errors(err: &std::io::Error): Error
}

enum FileOperation #F2DFCE {
  Copy { source: String, destination: String, overwrite: bool }
  Move { source: String, destination: String, overwrite: bool }
  Delete { path: String, recursive: bool }
  Create { path: String, content: String }
  Read { path: String, encoding: Option<String> }
  CreateDirectory { path: String, recursive: bool }
  Exists { path: String }
}

package "Event Flow" as EventFlow #D5E5F2 {
    class EventBus #A0D6B4 {
        -listeners: Vec<Box<dyn Fn(&dyn Event) -> Result<(), Error>>>
        +publish(event: &dyn Event): Result<(), Error>
        +subscribe<F>(callback: F): SubscriptionId
        +unsubscribe(id: SubscriptionId): bool
    }
    
    class EventFilter #E6F7FF {
        -type_filter: Option<EventType>
        -source_filter: Option<String>
        -payload_filter: HashMap<String, Vec<String>>
        +matches(&self, event: &dyn Event): bool
        +with_type(event_type: EventType): Self
        +with_source(source: &str): Self
        +with_payload_key(key: &str, value: &str): Self
    }
}

' Define relationships
Plugin <|.. FileOperationsAction #line:green;line.bold : implements

FileOperationsAction --|> Action #line:green;line.bold : implements
FileOperationsAction o-- FileOperation #line:blue;line.bold : contains

PluginRegistry o-- Plugin #line:red;line.bold : manages
PluginLoader ..> Plugin #line:blue;line.dashed : creates
PluginLoader ..> PluginRegistry #line:blue;line.dashed : fills

Plugin ..> Event #line:blue : handles
Plugin --o PluginInfo #line:blue : provides
Plugin ..> PluginState #line:blue : returns
Plugin ..> PluginCapability #line:blue : returns

Event o-- EventType #line:blue;line.bold : has
Event o-- EventPayload #line:blue;line.bold : has

EventFlow.EventBus o-- Event #line:red;line.bold : publishes
EventFlow.EventFilter ..> Event #line:blue;line.dashed : filters

PluginRegistry o-- EventFlow.EventBus #line:red : uses
PluginRegistry ..> EventFlow.EventFilter #line:blue;line.dashed : configures

' Sequence diagrams and process flows
note right of PluginRegistry::dispatch_event
  1. Receive event from source
  2. Apply event filters
  3. For each listening plugin:
     a. Check if plugin can handle event
     b. Call plugin.handle_event()
     c. Collect results
  4. Return combined result
end note

note right of PluginLoader::load_plugin
  1. Load dynamic library with libloading
  2. Call library's plugin_create() function
  3. Validate plugin interface
  4. Register with PluginRegistry
  5. Return Arc<dyn Plugin>
end note

note right of FileOperationsAction::execute
  1. Extract operation parameters from event
  2. Validate paths and permissions
  3. Perform file operation
  4. Handle any IO errors
  5. Return success or error result
end note

' Notes
note right of Plugin #E0FFE0
  Core interface that all plugins must implement.
  Uses async_trait to support async methods.
  
  Lifecycle:
  1. Load → 2. Initialize → 3. Start → 4. Handle Events → 5. Stop
end note

note bottom of PluginRegistry #E0FFE0
  Central registry that manages plugin lifecycle.
  Plugins are stored as Arc<dyn Plugin> for
  shared ownership across the application.
  
  Responsible for:
  - Plugin registration/deregistration
  - Plugin lifecycle (init/start/stop)
  - Event dispatching to plugins
  - Configuration management
end note

note bottom of FileOperationsAction #E0FFE0
  Concrete implementation of Action trait
  that performs file system operations.
  
  Handles file operations with proper error handling
  and path validation for security.
end note

note left of PluginLoader #E0FFE0
  Responsible for loading plugin shared libraries
  and instantiating plugin objects.
  
  Uses libloading crate to dynamically load
  Rust plugin libraries at runtime.
end note

note right of Event #E0FFE0
  Events are the primary way plugins
  communicate with each other and
  the core application.
  
  Events are immutable and cloneable to
  allow safe sharing between components.
end note

note bottom of EventFlow.EventBus #E0FFE0
  The EventBus provides a publish-subscribe
  pattern for Event distribution.
  
  Allows components to subscribe to events
  without direct coupling to event sources.
end note

' Color legend
legend right
  |= Component Type |= Purpose |
  |<#B8E6B8>| Core Interfaces | 
  |<#A0D6B4>| Main Plugin System Classes |
  |<#E6F7FF>| Data Structures |
  |<#F2DFCE>| Enums & Constants |
endlegend

' Relationship legend
legend bottom
  |= Relationship |= Meaning |
  |<#green>--- Implements ---| Class implements an interface |
  |<#red>--- Contains ---| Composition (strong ownership) |
  |<#blue>--- Uses ---| Association (weak reference) |
  |<#blue;line.dashed>--- Creates ---| Factory relationship |
endlegend

@enduml 