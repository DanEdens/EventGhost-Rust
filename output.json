{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.217","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\serde-1.0.217\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\serde-1.0.217\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\serde-a3c9aba1e9ccb9ce\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.217","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\serde-2ea39de0d06fe0ff\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.2","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\hashbrown-0.15.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\hashbrown-0.15.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libhashbrown-78bee169f212fdf3.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libhashbrown-78bee169f212fdf3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.1","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\equivalent-1.0.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"equivalent","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\equivalent-1.0.1\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libequivalent-a72ec7c8d9499c8c.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libequivalent-a72ec7c8d9499c8c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.93","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\proc-macro2-1.0.93\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\proc-macro2-1.0.93\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\proc-macro2-984a87759c2ca25b\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.14","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\unicode-ident-1.0.14\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_ident","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\unicode-ident-1.0.14\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libunicode_ident-01ee038e516840a5.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libunicode_ident-01ee038e516840a5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#target-lexicon@0.12.16","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\target-lexicon-0.12.16\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\target-lexicon-0.12.16\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\target-lexicon-ab3b6b246c7dfe1d\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winnow@0.6.24","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\winnow-0.6.24\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"winnow","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\winnow-0.6.24\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwinnow-c2b91c9f621c5189.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwinnow-c2b91c9f621c5189.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pkg-config@0.3.31","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\pkg-config-0.3.31\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pkg_config","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\pkg-config-0.3.31\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libpkg_config-a17066dbc4dbc3e2.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libpkg_config-a17066dbc4dbc3e2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#smallvec@1.13.2","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\smallvec-1.13.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"smallvec","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\smallvec-1.13.2\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libsmallvec-57614df62ac9e9e2.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libsmallvec-57614df62ac9e9e2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#heck@0.5.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\heck-0.5.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"heck","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\heck-0.5.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libheck-7027cb5da7ebf21a.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libheck-7027cb5da7ebf21a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#version-compare@0.2.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\version-compare-0.2.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"version_compare","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\version-compare-0.2.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libversion_compare-984ee65b2860ac8c.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libversion_compare-984ee65b2860ac8c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#autocfg@1.4.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\autocfg-1.4.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"autocfg","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\autocfg-1.4.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libautocfg-790808cf588c89d8.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libautocfg-790808cf588c89d8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_gnu@0.52.6","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows_x86_64_gnu-0.52.6\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows_x86_64_gnu-0.52.6\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\windows_x86_64_gnu-9fb51bb824d21da0\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.169","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\libc-0.2.169\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\libc-0.2.169\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\libc-465ef3a6ed5b145e\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winapi-x86_64-pc-windows-gnu@0.4.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\winapi-x86_64-pc-windows-gnu-0.4.0\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\winapi-x86_64-pc-windows-gnu-0.4.0\\build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\winapi-x86_64-pc-windows-gnu-bead0c0b1b3f4ec7\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.4","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\memchr-2.7.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memchr","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\memchr-2.7.4\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libmemchr-ea0bc96545a21614.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libmemchr-ea0bc96545a21614.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.217","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\serde-1.0.217\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\serde-1.0.217\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libserde-cd608248f8607c13.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libserde-cd608248f8607c13.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#indexmap@2.7.1","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\indexmap-2.7.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\indexmap-2.7.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libindexmap-e7374e3166ccfc4b.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libindexmap-e7374e3166ccfc4b.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.93","linked_libs":[],"linked_paths":[],"cfgs":["wrap_proc_macro"],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\proc-macro2-82a418b11db269f6\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#target-lexicon@0.12.16","linked_libs":[],"linked_paths":[],"cfgs":["feature=\"rust_1_40\""],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\target-lexicon-a12bb25357f5f462\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_gnu@0.52.6","linked_libs":[],"linked_paths":["native=C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows_x86_64_gnu-0.52.6\\lib"],"cfgs":[],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\windows_x86_64_gnu-e4a8e4e60b6556e2\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.169","linked_libs":[],"linked_paths":[],"cfgs":["freebsd11","libc_const_extern_fn"],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\libc-a32a0fb789047219\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#winapi-x86_64-pc-windows-gnu@0.4.0","linked_libs":[],"linked_paths":["native=C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\winapi-x86_64-pc-windows-gnu-0.4.0\\lib"],"cfgs":[],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\winapi-x86_64-pc-windows-gnu-d6ee5d9ea20aa191\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\pin-project-lite-0.2.16\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pin_project_lite","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\pin-project-lite-0.2.16\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libpin_project_lite-c8852ca5a35b3892.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libpin_project_lite-c8852ca5a35b3892.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.9","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\winapi-0.3.9\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\winapi-0.3.9\\build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["consoleapi","errhandlingapi","fileapi","handleapi","processenv","winsock2","ws2def"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\winapi-c380f33b06b395df\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#once_cell@1.20.2","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\once_cell-1.20.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"once_cell","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\once_cell-1.20.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","race","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libonce_cell-a2a22aa29ff2a1f0.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libonce_cell-a2a22aa29ff2a1f0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.5","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\version_check-0.9.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"version_check","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\version_check-0.9.5\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libversion_check-811c215ddcd48508.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libversion_check-811c215ddcd48508.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#smallvec@1.13.2","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\smallvec-1.13.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"smallvec","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\smallvec-1.13.2\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["const_generics","const_new","union"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libsmallvec-c287e990f9ed05ac.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libsmallvec-c287e990f9ed05ac.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\slab-0.4.9\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\slab-0.4.9\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\slab-f0f64a31796eb299\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\syn-1.0.109\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\syn-1.0.109\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","full","parsing","printing","proc-macro","quote"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\syn-3c8e4ae9fb3b8d1a\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-sink@0.3.31","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\futures-sink-0.3.31\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_sink","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\futures-sink-0.3.31\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfutures_sink-983c4a7798208afa.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfutures_sink-983c4a7798208afa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml_datetime@0.6.8","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\toml_datetime-0.6.8\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml_datetime","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\toml_datetime-0.6.8\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["serde"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtoml_datetime-dc017ef35790a787.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtoml_datetime-dc017ef35790a787.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_spanned@0.6.8","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\serde_spanned-0.6.8\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_spanned","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\serde_spanned-0.6.8\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["serde"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libserde_spanned-f09bed90d793aa8c.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libserde_spanned-f09bed90d793aa8c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.93","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\proc-macro2-1.0.93\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro2","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\proc-macro2-1.0.93\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libproc_macro2-0244716900fd90e4.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libproc_macro2-0244716900fd90e4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#target-lexicon@0.12.16","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\target-lexicon-0.12.16\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"target_lexicon","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\target-lexicon-0.12.16\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtarget_lexicon-5a2e799bc03c471a.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtarget_lexicon-5a2e799bc03c471a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_gnu@0.52.6","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows_x86_64_gnu-0.52.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"windows_x86_64_gnu","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows_x86_64_gnu-0.52.6\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwindows_x86_64_gnu-1820dbbc5a71228b.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwindows_x86_64_gnu-1820dbbc5a71228b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.169","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\libc-0.2.169\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libc","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\libc-0.2.169\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\liblibc-ae1f6a35bff82eb7.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\liblibc-ae1f6a35bff82eb7.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.9","linked_libs":["dylib=winapi_advapi32","dylib=winapi_cfgmgr32","dylib=winapi_gdi32","dylib=winapi_kernel32","dylib=winapi_msimg32","dylib=winapi_opengl32","dylib=winapi_user32","dylib=winapi_winspool","dylib=winapi_ws2_32"],"linked_paths":[],"cfgs":["feature=\"minwindef\"","feature=\"inaddr\"","feature=\"devpropdef\"","feature=\"excpt\"","feature=\"cfg\"","feature=\"wingdi\"","feature=\"winnt\"","feature=\"minwinbase\"","feature=\"ntstatus\"","feature=\"guiddef\"","feature=\"windef\"","feature=\"winreg\"","feature=\"ktmtypes\"","feature=\"libloaderapi\"","feature=\"cfgmgr32\"","feature=\"rpcndr\"","feature=\"wtypesbase\"","feature=\"wincon\"","feature=\"reason\"","feature=\"processthreadsapi\"","feature=\"winbase\"","feature=\"vadefs\"","feature=\"winerror\"","feature=\"basetsd\"","feature=\"ntdef\"","feature=\"qos\"","feature=\"wincontypes\"","feature=\"vcruntime\""],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\winapi-317f0968881114f3\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winapi-x86_64-pc-windows-gnu@0.4.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\winapi-x86_64-pc-windows-gnu-0.4.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"winapi_x86_64_pc_windows_gnu","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\winapi-x86_64-pc-windows-gnu-0.4.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwinapi_x86_64_pc_windows_gnu-81ebba96bf416c5b.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwinapi_x86_64_pc_windows_gnu-81ebba96bf416c5b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\proc-macro-error-attr-1.0.4\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\proc-macro-error-attr-1.0.4\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\proc-macro-error-attr-9d79de757e62db0f\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error@1.0.4","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\proc-macro-error-1.0.4\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\proc-macro-error-1.0.4\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","syn","syn-error"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\proc-macro-error-e8cd69eec46bda95\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","linked_libs":[],"linked_paths":[],"cfgs":["syn_disable_nightly_tests"],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\syn-96e80f09e89ec5a9\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\slab-d49e761c4fa63c05\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winnow@0.5.40","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\winnow-0.5.40\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"winnow","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\winnow-0.5.40\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwinnow-b8c02241d90e0a72.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwinnow-b8c02241d90e0a72.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.95","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\anyhow-1.0.95\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\anyhow-1.0.95\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\anyhow-473011edd1fc1ff2\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cfg-if-1.0.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_if","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cfg-if-1.0.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libcfg_if-d3ef9649ec1cab8d.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libcfg_if-d3ef9649ec1cab8d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quote@1.0.38","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\quote-1.0.38\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quote","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\quote-1.0.38\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libquote-2485dfa896b9b569.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libquote-2485dfa896b9b569.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml_edit@0.22.22","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\toml_edit-0.22.22\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml_edit","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\toml_edit-0.22.22\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["parse","serde"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtoml_edit-0cc1317b7494bead.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtoml_edit-0cc1317b7494bead.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-expr@0.15.8","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cfg-expr-0.15.8\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_expr","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cfg-expr-0.15.8\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","target-lexicon","targets"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libcfg_expr-4ca396504e6b7637.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libcfg_expr-4ca396504e6b7637.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows-targets-0.52.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"windows_targets","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows-targets-0.52.6\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwindows_targets-6e3b14db776f365c.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwindows_targets-6e3b14db776f365c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.9","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\winapi-0.3.9\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"winapi","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\winapi-0.3.9\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["consoleapi","errhandlingapi","fileapi","handleapi","processenv","winsock2","ws2def"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwinapi-7cf14fa9dc374f32.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwinapi-7cf14fa9dc374f32.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\proc-macro-error-attr-5f5fec52a9d9e865\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\slab-0.4.9\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"slab","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\slab-0.4.9\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libslab-e039ba0a002154de.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libslab-e039ba0a002154de.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error@1.0.4","linked_libs":[],"linked_paths":[],"cfgs":["use_fallback"],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\proc-macro-error-cb66ca29dac86a66\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml_edit@0.19.15","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\toml_edit-0.19.15\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml_edit","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\toml_edit-0.19.15\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtoml_edit-053e967a55b0dc4d.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtoml_edit-053e967a55b0dc4d.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.95","linked_libs":[],"linked_paths":[],"cfgs":["std_backtrace"],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\anyhow-9dab5ab02d73b2b6\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.31","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\futures-task-0.3.31\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_task","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\futures-task-0.3.31\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfutures_task-9a9f463770fd7a41.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfutures_task-9a9f463770fd7a41.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\pin-utils-0.1.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pin_utils","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\pin-utils-0.1.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libpin_utils-a578a686df0c5cc2.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libpin_utils-a578a686df0c5cc2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\thiserror-1.0.69\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\thiserror-1.0.69\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\thiserror-230ce3922b1e3cde\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-io@0.3.31","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\futures-io-0.3.31\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_io","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\futures-io-0.3.31\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfutures_io-9c1ddf653c8ab34b.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfutures_io-9c1ddf653c8ab34b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.217","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\serde-1.0.217\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\serde-1.0.217\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","derive","serde_derive","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\serde-e0f6e29ad682f208\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml@0.8.19","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\toml-0.8.19\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\toml-0.8.19\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["parse"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtoml-72be9e3559f00217.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtoml-72be9e3559f00217.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@2.0.96","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\syn-2.0.96\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\syn-2.0.96\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","extra-traits","full","parsing","printing","proc-macro","visit-mut"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libsyn-6c509da1b5c0142b.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libsyn-6c509da1b5c0142b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\proc-macro-error-attr-1.0.4\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"proc_macro_error_attr","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\proc-macro-error-attr-1.0.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\proc_macro_error_attr-59a1d9162fb80842.dll","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libproc_macro_error_attr-59a1d9162fb80842.dll.a"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\syn-1.0.109\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\syn-1.0.109\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","full","parsing","printing","proc-macro","quote"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libsyn-c2ada97f031a760a.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libsyn-c2ada97f031a760a.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\thiserror-56f83b5e535ce3c2\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-crate@1.3.1","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\proc-macro-crate-1.3.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro_crate","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\proc-macro-crate-1.3.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libproc_macro_crate-616f104f7979456e.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libproc_macro_crate-616f104f7979456e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.95","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\anyhow-1.0.95\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"anyhow","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\anyhow-1.0.95\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libanyhow-a926700a8254857a.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libanyhow-a926700a8254857a.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.217","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\serde-b17af8fb00b7a30c\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#heck@0.4.1","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\heck-0.4.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"heck","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\heck-0.4.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libheck-caf6de05b53305d0.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libheck-caf6de05b53305d0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bitflags@1.3.2","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\bitflags-1.3.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bitflags","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\bitflags-1.3.2\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libbitflags-6b044b8c20f95372.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libbitflags-6b044b8c20f95372.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.59.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows-sys-0.59.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"windows_sys","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows-sys-0.59.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["Win32","Win32_Foundation","Win32_Storage","Win32_Storage_FileSystem","Win32_System","Win32_System_Console","Win32_System_SystemInformation","default"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwindows_sys-d97e9d5242a57a85.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwindows_sys-d97e9d5242a57a85.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.52.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows-sys-0.52.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"windows_sys","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows-sys-0.52.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["Wdk","Wdk_Foundation","Wdk_Storage","Wdk_Storage_FileSystem","Wdk_System","Wdk_System_IO","Win32","Win32_Foundation","Win32_Networking","Win32_Networking_WinSock","Win32_Security","Win32_Storage","Win32_Storage_FileSystem","Win32_System","Win32_System_Console","Win32_System_IO","Win32_System_Pipes","Win32_System_SystemServices","Win32_System_Threading","Win32_System_WindowsProgramming","default"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwindows_sys-6e4f4f97d26e2e7c.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwindows_sys-6e4f4f97d26e2e7c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_gnu@0.48.5","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows_x86_64_gnu-0.48.5\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows_x86_64_gnu-0.48.5\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\windows_x86_64_gnu-480c25dedb811ac0\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gio@0.17.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gio-0.17.10\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gio-0.17.10\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["v2_58","v2_60","v2_62","v2_64","v2_66"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\gio-bfc1cfdee5c975e5\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#semver@1.0.25","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\semver-1.0.25\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\semver-1.0.25\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\semver-28806296fa899831\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#system-deps@6.2.2","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\system-deps-6.2.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"system_deps","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\system-deps-6.2.2\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libsystem_deps-ac62450e304b2a2c.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libsystem_deps-ac62450e304b2a2c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-macro@0.3.31","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\futures-macro-0.3.31\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"futures_macro","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\futures-macro-0.3.31\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\futures_macro-eeb3559662aab8f6.dll","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfutures_macro-eeb3559662aab8f6.dll.a"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error@1.0.4","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\proc-macro-error-1.0.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro_error","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\proc-macro-error-1.0.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","syn","syn-error"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libproc_macro_error-61684dbf2d86d8a3.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libproc_macro_error-61684dbf2d86d8a3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror-impl@1.0.69","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\thiserror-impl-1.0.69\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"thiserror_impl","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\thiserror-impl-1.0.69\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\thiserror_impl-c922b6d453e87d69.dll","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libthiserror_impl-c922b6d453e87d69.dll.a"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.217","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\serde_derive-1.0.217\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"serde_derive","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\serde_derive-1.0.217\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\serde_derive-de7a400957f2cf14.dll","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libserde_derive-de7a400957f2cf14.dll.a"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#semver@1.0.25","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\semver-80c041116853bc89\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#gio@0.17.10","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\gio-e7db934484d61326\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_gnu@0.48.5","linked_libs":[],"linked_paths":["native=C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows_x86_64_gnu-0.48.5\\lib"],"cfgs":[],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\windows_x86_64_gnu-06467620a0abeacc\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.12","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\lock_api-0.4.12\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\lock_api-0.4.12\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["atomic_usize","default"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\lock_api-f06a2be50073678b\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\parking_lot_core-0.9.10\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\parking_lot_core-0.9.10\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\parking_lot_core-b10f9df83f30204b\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winapi-util@0.1.9","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\winapi-util-0.1.9\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"winapi_util","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\winapi-util-0.1.9\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwinapi_util-7599bba0dfcf1e6f.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwinapi_util-7599bba0dfcf1e6f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#aho-corasick@1.1.3","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\aho-corasick-1.1.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"aho_corasick","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\aho-corasick-1.1.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["perf-literal","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libaho_corasick-833e668aac745152.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libaho_corasick-833e668aac745152.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#scopeguard@1.2.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\scopeguard-1.2.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"scopeguard","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\scopeguard-1.2.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libscopeguard-5fbc348b9eed0944.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libscopeguard-5fbc348b9eed0944.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.8.5","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\regex-syntax-0.8.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_syntax","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\regex-syntax-0.8.5\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std","unicode-case","unicode-perl"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libregex_syntax-5100f43cef29bf9b.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libregex_syntax-5100f43cef29bf9b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\crossbeam-utils-0.8.21\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\crossbeam-utils-0.8.21\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\crossbeam-utils-0c251aaa51264d60\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#glib-sys@0.17.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\glib-sys-0.17.10\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\glib-sys-0.17.10\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["v2_58","v2_60","v2_62","v2_64","v2_66"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\glib-sys-bcf41ff785e36b89\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gobject-sys@0.17.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gobject-sys-0.17.10\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gobject-sys-0.17.10\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["v2_58","v2_62","v2_66"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\gobject-sys-3a2bd1d17d3ede43\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gio-sys@0.17.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gio-sys-0.17.10\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gio-sys-0.17.10\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["v2_58","v2_60","v2_62","v2_64","v2_66"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\gio-sys-447b82f3aa76d691\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\thiserror-1.0.69\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"thiserror","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\thiserror-1.0.69\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libthiserror-cfafd888cbedb708.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libthiserror-cfafd888cbedb708.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#glib-macros@0.17.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\glib-macros-0.17.10\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"glib_macros","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\glib-macros-0.17.10\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\glib_macros-2ccc2c3c500f5ba4.dll","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libglib_macros-2ccc2c3c500f5ba4.dll.a"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cairo-sys-rs@0.17.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cairo-sys-rs-0.17.10\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cairo-sys-rs-0.17.10\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["glib","use_glib"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\cairo-sys-rs-cdac51d9fbc2c889\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pango-sys@0.17.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\pango-sys-0.17.10\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\pango-sys-0.17.10\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["v1_42","v1_44","v1_46","v1_48","v1_50"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\pango-sys-acf9d47332750274\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.217","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\serde-1.0.217\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\serde-1.0.217\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","derive","serde_derive","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libserde-2cff5e74a6182f8a.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libserde-2cff5e74a6182f8a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gdk-pixbuf-sys@0.17.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gdk-pixbuf-sys-0.17.10\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gdk-pixbuf-sys-0.17.10\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\gdk-pixbuf-sys-63aadc631d255239\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gdk4-sys@0.6.3","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gdk4-sys-0.6.3\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gdk4-sys-0.6.3\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["v4_2","v4_4","v4_6","v4_8"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\gdk4-sys-5932e57f24fba808\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#graphene-sys@0.17.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\graphene-sys-0.17.10\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\graphene-sys-0.17.10\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\graphene-sys-964625edf424d305\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#semver@1.0.25","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\semver-1.0.25\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"semver","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\semver-1.0.25\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libsemver-84bbe42d3519eb28.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libsemver-84bbe42d3519eb28.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_gnu@0.48.5","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows_x86_64_gnu-0.48.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"windows_x86_64_gnu","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows_x86_64_gnu-0.48.5\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwindows_x86_64_gnu-8d9cc87dc1f98c01.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwindows_x86_64_gnu-8d9cc87dc1f98c01.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gsk4-sys@0.6.3","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gsk4-sys-0.6.3\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gsk4-sys-0.6.3\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["v4_2","v4_4","v4_6"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\gsk4-sys-4e34c8e0a28bd3b5\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.12","linked_libs":[],"linked_paths":[],"cfgs":["has_const_fn_trait_bound"],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\lock_api-16d866ea747beb27\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#glib-sys@0.17.10","linked_libs":["glib-2.0","intl","gobject-2.0","glib-2.0","intl"],"linked_paths":["native=C:/msys64/mingw64/lib","native=C:/msys64/mingw64/lib"],"cfgs":["system_deps_have_glib_2_0","system_deps_have_gobject_2_0"],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\glib-sys-a858294a584b934f\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#gobject-sys@0.17.10","linked_libs":["gobject-2.0","glib-2.0","intl"],"linked_paths":["native=C:/msys64/mingw64/lib"],"cfgs":["system_deps_have_gobject_2_0"],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\gobject-sys-18b710bb5bb3fbc8\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#gio-sys@0.17.10","linked_libs":["gio-2.0","gobject-2.0","glib-2.0","intl"],"linked_paths":["native=C:/msys64/mingw64/lib"],"cfgs":["system_deps_have_gio_2_0"],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\gio-sys-b194fc9b518dd36c\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#cairo-sys-rs@0.17.10","linked_libs":["cairo","cairo-gobject","cairo","gobject-2.0","glib-2.0","intl"],"linked_paths":["native=C:/msys64/mingw64/lib","native=C:/msys64/mingw64/lib"],"cfgs":["system_deps_have_cairo","system_deps_have_cairo_gobject"],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\cairo-sys-rs-b5a97d7f93821b86\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#gdk-pixbuf-sys@0.17.10","linked_libs":["gdk_pixbuf-2.0","gobject-2.0","glib-2.0","intl"],"linked_paths":["native=C:/msys64/mingw64/lib"],"cfgs":["system_deps_have_gdk_pixbuf_2_0"],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\gdk-pixbuf-sys-2d710836b39abba8\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#pango-sys@0.17.10","linked_libs":["pango-1.0","gobject-2.0","glib-2.0","intl","harfbuzz"],"linked_paths":["native=C:/msys64/mingw64/lib"],"cfgs":["system_deps_have_pango"],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\pango-sys-ef3d6c8729bef7ad\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#gdk4-sys@0.6.3","linked_libs":["gtk-4","pangowin32-1.0","pangocairo-1.0","pango-1.0","harfbuzz","gdk_pixbuf-2.0","cairo-gobject","cairo","vulkan-1.dll","graphene-1.0","gio-2.0","gobject-2.0","glib-2.0","intl"],"linked_paths":["native=C:/msys64/mingw64/lib"],"cfgs":["system_deps_have_gtk4","gdk_backend=\"win32\""],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\gdk4-sys-690bf4c7d2068953\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#graphene-sys@0.17.10","linked_libs":["graphene-1.0","gobject-2.0","glib-2.0","intl"],"linked_paths":["native=C:/msys64/mingw64/lib"],"cfgs":["system_deps_have_graphene_gobject_1_0"],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\graphene-sys-4ee3f59ffa3ad943\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#log@0.4.25","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\log-0.4.25\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"log","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\log-0.4.25\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["serde","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\liblog-c4c0daa88399ea2f.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\liblog-c4c0daa88399ea2f.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.10","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\parking_lot_core-113f6cb62f948195\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.12","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\lock_api-0.4.12\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lock_api","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\lock_api-0.4.12\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["atomic_usize","default"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\liblock_api-54da09db8048de30.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\liblock_api-54da09db8048de30.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustc_version@0.4.1","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\rustc_version-0.4.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustc_version","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\rustc_version-0.4.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\librustc_version-1c1c7552710c02f8.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\librustc_version-1c1c7552710c02f8.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#gsk4-sys@0.6.3","linked_libs":["gtk-4","pangowin32-1.0","pangocairo-1.0","pango-1.0","harfbuzz","gdk_pixbuf-2.0","cairo-gobject","cairo","vulkan-1.dll","graphene-1.0","gio-2.0","gobject-2.0","glib-2.0","intl"],"linked_paths":["native=C:/msys64/mingw64/lib"],"cfgs":["system_deps_have_gtk4"],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\gsk4-sys-98bf6b0a130018d2\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.48.5","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows-targets-0.48.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"windows_targets","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows-targets-0.48.5\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwindows_targets-440b7116410e653b.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwindows_targets-440b7116410e653b.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\crossbeam-utils-86b74cbb0a9c194b\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#glib-sys@0.17.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\glib-sys-0.17.10\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"glib_sys","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\glib-sys-0.17.10\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["v2_58","v2_60","v2_62","v2_64","v2_66"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libglib_sys-8f0c9ba9a7d9352e.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libglib_sys-8f0c9ba9a7d9352e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\parking_lot_core-0.9.10\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parking_lot_core","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\parking_lot_core-0.9.10\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libparking_lot_core-39566f8bb9a08272.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libparking_lot_core-39566f8bb9a08272.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-automata@0.4.9","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\regex-automata-0.4.9\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_automata","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\regex-automata-0.4.9\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","dfa-onepass","hybrid","meta","nfa-backtrack","nfa-pikevm","nfa-thompson","perf-inline","perf-literal","perf-literal-multisubstring","perf-literal-substring","std","syntax","unicode-case","unicode-perl","unicode-word-boundary"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libregex_automata-4fb8ce24508511a8.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libregex_automata-4fb8ce24508511a8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-core@0.1.33","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\tracing-core-0.1.33\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_core","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\tracing-core-0.1.33\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","once_cell","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtracing_core-8edd307a52006110.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtracing_core-8edd307a52006110.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memoffset@0.9.1","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\memoffset-0.9.1\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\memoffset-0.9.1\\build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\memoffset-6ea92a5f1fc377f8\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.6.29","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\regex-syntax-0.6.29\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_syntax","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\regex-syntax-0.6.29\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libregex_syntax-f34e11201ad3b313.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libregex_syntax-f34e11201ad3b313.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\crossbeam-utils-0.8.21\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_utils","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\crossbeam-utils-0.8.21\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libcrossbeam_utils-ca3fe6fa7db42b1c.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libcrossbeam_utils-ca3fe6fa7db42b1c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#field-offset@0.3.6","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\field-offset-0.3.6\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\field-offset-0.3.6\\build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\field-offset-b5e621ec9dee01ab\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.48.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows-sys-0.48.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"windows_sys","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows-sys-0.48.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["Win32","Win32_Foundation","Win32_Globalization","Win32_Security","Win32_Storage","Win32_Storage_FileSystem","Win32_System","Win32_System_Com","Win32_System_IO","Win32_System_Threading","Win32_System_WindowsProgramming","Win32_UI","Win32_UI_Shell","default"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwindows_sys-9825b3a295244dc3.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwindows_sys-9825b3a295244dc3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gtk4-sys@0.6.3","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gtk4-sys-0.6.3\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gtk4-sys-0.6.3\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["v4_2","v4_4","v4_6","v4_8"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\gtk4-sys-9dfc3c6e3a87e9df\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-macros@2.5.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\tokio-macros-2.5.0\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"tokio_macros","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\tokio-macros-2.5.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\tokio_macros-6c2b80cecf689177.dll","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtokio_macros-6c2b80cecf689177.dll.a"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-attributes@0.1.28","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\tracing-attributes-0.1.28\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"tracing_attributes","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\tracing-attributes-0.1.28\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\tracing_attributes-5b10d5129d0117c4.dll","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtracing_attributes-5b10d5129d0117c4.dll.a"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mio@1.0.3","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\mio-1.0.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"mio","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\mio-1.0.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["net","os-ext","os-poll"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libmio-37aeb37ba0078aa2.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libmio-37aeb37ba0078aa2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#socket2@0.5.8","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\socket2-0.5.8\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"socket2","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\socket2-0.5.8\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["all"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libsocket2-30186285efce97df.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libsocket2-30186285efce97df.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\num-traits-0.2.19\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\num-traits-0.2.19\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\num-traits-d9e2746efa6453d4\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gobject-sys@0.17.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gobject-sys-0.17.10\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gobject_sys","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gobject-sys-0.17.10\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["v2_58","v2_62","v2_66"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgobject_sys-c5d9c875985f8306.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgobject_sys-c5d9c875985f8306.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cairo-sys-rs@0.17.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cairo-sys-rs-0.17.10\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cairo_sys","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cairo-sys-rs-0.17.10\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["glib","use_glib"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libcairo_sys-14f1de1750bdc28a.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libcairo_sys-14f1de1750bdc28a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#graphene-sys@0.17.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\graphene-sys-0.17.10\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"graphene_sys","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\graphene-sys-0.17.10\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgraphene_sys-8a454d4645b53712.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgraphene_sys-8a454d4645b53712.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot@0.12.3","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\parking_lot-0.12.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parking_lot","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\parking_lot-0.12.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libparking_lot-47038e9c6db4a77d.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libparking_lot-47038e9c6db4a77d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex@1.11.1","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\regex-1.11.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\regex-1.11.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["perf","perf-backtrack","perf-cache","perf-dfa","perf-inline","perf-literal","perf-onepass","std","unicode-case","unicode-perl"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libregex-a12cb33e59385c11.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libregex-a12cb33e59385c11.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-automata@0.1.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\regex-automata-0.1.10\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_automata","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\regex-automata-0.1.10\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","regex-syntax","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libregex_automata-96d031b0e81dead4.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libregex_automata-96d031b0e81dead4.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#memoffset@0.9.1","linked_libs":[],"linked_paths":[],"cfgs":["tuple_ty","allow_clippy","maybe_uninit","doctests","raw_ref_macros","stable_const","stable_offset_of"],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\memoffset-1d83dd7458251f19\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#powerfmt@0.2.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\powerfmt-0.2.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"powerfmt","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\powerfmt-0.2.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libpowerfmt-a40ee18e057c8aaf.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libpowerfmt-a40ee18e057c8aaf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#overload@0.1.1","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\overload-0.1.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"overload","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\overload-0.1.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\liboverload-77855296fc550a93.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\liboverload-77855296fc550a93.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.5.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\lazy_static-1.5.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lazy_static","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\lazy_static-1.5.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\liblazy_static-7ffda3244712b3b9.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\liblazy_static-7ffda3244712b3b9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bytes@1.9.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\bytes-1.9.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bytes","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\bytes-1.9.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libbytes-62e8fb494793d391.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libbytes-62e8fb494793d391.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.14","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\itoa-1.0.14\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itoa","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\itoa-1.0.14\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libitoa-eabe42bad66b4ae8.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libitoa-eabe42bad66b4ae8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing@0.1.41","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\tracing-0.1.41\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\tracing-0.1.41\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["attributes","default","std","tracing-attributes"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtracing-113410088d4bfd55.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtracing-113410088d4bfd55.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#gtk4-sys@0.6.3","linked_libs":["gtk-4","pangowin32-1.0","pangocairo-1.0","pango-1.0","harfbuzz","gdk_pixbuf-2.0","cairo-gobject","cairo","vulkan-1.dll","graphene-1.0","gio-2.0","gobject-2.0","glib-2.0","intl"],"linked_paths":["native=C:/msys64/mingw64/lib"],"cfgs":["system_deps_have_gtk4"],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\gtk4-sys-753e26ada5b35545\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#field-offset@0.3.6","linked_libs":[],"linked_paths":[],"cfgs":["fieldoffset_maybe_uninit","fieldoffset_has_alloc"],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\field-offset-2dac1c4a92d2b755\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gio-sys@0.17.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gio-sys-0.17.10\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gio_sys","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gio-sys-0.17.10\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["v2_58","v2_60","v2_62","v2_64","v2_66"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgio_sys-90aace71e4e3fadf.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgio_sys-90aace71e4e3fadf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pango-sys@0.17.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\pango-sys-0.17.10\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pango_sys","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\pango-sys-0.17.10\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["v1_42","v1_44","v1_46","v1_48","v1_50"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libpango_sys-d54737aa1c111456.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libpango_sys-d54737aa1c111456.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#matchers@0.1.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\matchers-0.1.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"matchers","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\matchers-0.1.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libmatchers-f57c80e39fe73f33.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libmatchers-f57c80e39fe73f33.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sharded-slab@0.1.7","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\sharded-slab-0.1.7\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sharded_slab","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\sharded-slab-0.1.7\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libsharded_slab-bad950491b433b34.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libsharded_slab-bad950491b433b34.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#nu-ansi-term@0.46.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nu-ansi-term-0.46.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"nu_ansi_term","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\nu-ansi-term-0.46.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libnu_ansi_term-e909a32240c31f09.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libnu_ansi_term-e909a32240c31f09.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memoffset@0.9.1","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\memoffset-0.9.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memoffset","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\memoffset-0.9.1\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libmemoffset-05e2cf064b28f584.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libmemoffset-05e2cf064b28f584.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#deranged@0.3.11","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\deranged-0.3.11\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"deranged","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\deranged-0.3.11\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","powerfmt","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libderanged-3fe22cf03a0bc0e5.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libderanged-3fe22cf03a0bc0e5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-channel@0.5.14","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\crossbeam-channel-0.5.14\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_channel","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\crossbeam-channel-0.5.14\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libcrossbeam_channel-590c177af242dbe9.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libcrossbeam_channel-590c177af242dbe9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-log@0.2.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\tracing-log-0.2.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_log","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\tracing-log-0.2.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["log-tracer","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtracing_log-6514c32dcb97649b.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtracing_log-6514c32dcb97649b.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","linked_libs":[],"linked_paths":[],"cfgs":["has_total_cmp"],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\num-traits-c418b30264e4ed58\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#same-file@1.0.6","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\same-file-1.0.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"same_file","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\same-file-1.0.6\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libsame_file-c47cdd6a3c30983f.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libsame_file-c47cdd6a3c30983f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thread_local@1.1.8","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\thread_local-1.1.8\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"thread_local","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\thread_local-1.1.8\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libthread_local-c9a723ee28f641a9.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libthread_local-c9a723ee28f641a9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.15","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\getrandom-0.2.15\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\getrandom-0.2.15\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgetrandom-fe489704e456bde5.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgetrandom-fe489704e456bde5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gdk-pixbuf-sys@0.17.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gdk-pixbuf-sys-0.17.10\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gdk_pixbuf_sys","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gdk-pixbuf-sys-0.17.10\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgdk_pixbuf_sys-7adec451aa53ef5f.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgdk_pixbuf_sys-7adec451aa53ef5f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#time-core@0.1.2","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\time-core-0.1.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"time_core","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\time-core-0.1.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtime_core-cf7a32c91e6e310c.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtime_core-cf7a32c91e6e310c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-conv@0.1.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\num-conv-0.1.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_conv","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\num-conv-0.1.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libnum_conv-48dc08ad4767af9d.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libnum_conv-48dc08ad4767af9d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.137","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\serde_json-1.0.137\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\serde_json-1.0.137\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\serde_json-876469ebd8100c00\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#option-ext@0.2.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\option-ext-0.2.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"option_ext","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\option-ext-0.2.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\liboption_ext-40bccc69a46f0cfe.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\liboption_ext-40bccc69a46f0cfe.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\num-traits-0.2.19\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_traits","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\num-traits-0.2.19\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libnum_traits-7bddab2ab2a8face.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libnum_traits-7bddab2ab2a8face.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#field-offset@0.3.6","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\field-offset-0.3.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"field_offset","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\field-offset-0.3.6\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfield_offset-a18cbc979d4e939d.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfield_offset-a18cbc979d4e939d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-subscriber@0.3.19","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\tracing-subscriber-0.3.19\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_subscriber","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\tracing-subscriber-0.3.19\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","ansi","default","env-filter","fmt","matchers","nu-ansi-term","once_cell","regex","registry","sharded-slab","smallvec","std","thread_local","tracing","tracing-log"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtracing_subscriber-c189ae5f65c730c0.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtracing_subscriber-c189ae5f65c730c0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#walkdir@2.5.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\walkdir-2.5.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"walkdir","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\walkdir-2.5.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwalkdir-9e2a9337c94fd8d6.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwalkdir-9e2a9337c94fd8d6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gtk4-macros@0.6.6","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gtk4-macros-0.6.6\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"gtk4_macros","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gtk4-macros-0.6.6\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\gtk4_macros-8d3685f5ccffc73b.dll","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgtk4_macros-8d3685f5ccffc73b.dll.a"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#termcolor@1.4.1","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\termcolor-1.4.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"termcolor","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\termcolor-1.4.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtermcolor-77fe054f1a28f154.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtermcolor-77fe054f1a28f154.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#is-terminal@0.4.13","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\is-terminal-0.4.13\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"is_terminal","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\is-terminal-0.4.13\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libis_terminal-6acf775c6e81592a.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libis_terminal-6acf775c6e81592a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#filetime@0.2.25","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\filetime-0.2.25\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"filetime","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\filetime-0.2.25\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfiletime-62103832b93cf3e8.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfiletime-62103832b93cf3e8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gdk4-sys@0.6.3","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gdk4-sys-0.6.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gdk4_sys","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gdk4-sys-0.6.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["v4_2","v4_4","v4_6","v4_8"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgdk4_sys-ec565b55dba02128.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgdk4_sys-ec565b55dba02128.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dirs-sys@0.4.1","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\dirs-sys-0.4.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dirs_sys","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\dirs-sys-0.4.1\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libdirs_sys-915edd42f08438ca.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libdirs_sys-915edd42f08438ca.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.137","linked_libs":[],"linked_paths":[],"cfgs":["fast_arithmetic=\"64\""],"env":[],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\serde_json-ae9072202220457b\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#time@0.3.37","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\time-0.3.37\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"time","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\time-0.3.37\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","formatting","parsing","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtime-ef4dbce264612ff4.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtime-ef4dbce264612ff4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows-core@0.52.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows-core-0.52.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"windows_core","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows-core-0.52.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwindows_core-43039125d10c7314.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwindows_core-43039125d10c7314.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\eventghost-f1dceb980bb0c460\\build-script-build.exe"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fastrand@2.3.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\fastrand-2.3.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fastrand","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\fastrand-2.3.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfastrand-327d01557789bf62.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfastrand-327d01557789bf62.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#humantime@2.1.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\humantime-2.1.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"humantime","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\humantime-2.1.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libhumantime-d6ffeaad8e8831c8.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libhumantime-d6ffeaad8e8831c8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.18","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\ryu-1.0.18\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ryu","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\ryu-1.0.18\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libryu-444fef9436dc64e7.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libryu-444fef9436dc64e7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#chrono@0.4.39","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\chrono-0.4.39\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"chrono","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\chrono-0.4.39\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","android-tzdata","clock","default","iana-time-zone","js-sys","now","oldtime","serde","std","wasm-bindgen","wasmbind","winapi","windows-targets"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libchrono-134f3af581d65bf5.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libchrono-134f3af581d65bf5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#notify@6.1.1","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\notify-6.1.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"notify","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\notify-6.1.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["crossbeam-channel","default","fsevent-sys","macos_fsevent"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libnotify-7fc4e26c5ea3cc10.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libnotify-7fc4e26c5ea3cc10.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#uuid@1.12.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\uuid-1.12.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"uuid","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\uuid-1.12.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","rng","serde","std","v4"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libuuid-ca38c59432ad03aa.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libuuid-ca38c59432ad03aa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-trait@0.1.85","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"async_trait","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\async_trait-b1f9af922e11bad7.dll","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libasync_trait-b1f9af922e11bad7.dll.a"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gsk4-sys@0.6.3","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gsk4-sys-0.6.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gsk4_sys","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gsk4-sys-0.6.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["v4_2","v4_4","v4_6"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgsk4_sys-c18ae0e7f99870f3.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgsk4_sys-c18ae0e7f99870f3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dirs@5.0.1","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\dirs-5.0.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dirs","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\dirs-5.0.1\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libdirs-9cd5ca6c8b9aafb5.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libdirs-9cd5ca6c8b9aafb5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.137","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\serde_json-1.0.137\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\serde_json-1.0.137\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libserde_json-e6cf4f3fd6539cc9.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libserde_json-e6cf4f3fd6539cc9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#windows@0.52.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows-0.52.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"windows","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows-0.52.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["Win32","Win32_Foundation","Win32_System","Win32_System_LibraryLoader","Win32_UI","Win32_UI_WindowsAndMessaging","default"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwindows-84abf4c45916618b.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libwindows-84abf4c45916618b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-appender@0.2.3","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\tracing-appender-0.2.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_appender","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\tracing-appender-0.2.3\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtracing_appender-b31264ad977a6be2.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtracing_appender-b31264ad977a6be2.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","linked_libs":["gtk-4","pangowin32-1.0","pangocairo-1.0","pango-1.0","harfbuzz","gdk_pixbuf-2.0","cairo-gobject","cairo","vulkan-1.dll","graphene-1.0","gio-2.0","gobject-2.0","glib-2.0","intl"],"linked_paths":["C:/msys64/mingw64/lib","native=C:/msys64/mingw64/lib"],"cfgs":[],"env":[["PKG_CONFIG_PATH","C:/msys64/mingw64/lib/pkgconfig"]],"out_dir":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\build\\eventghost-027578f2f4b8a54f\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tempfile@3.15.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\tempfile-3.15.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tempfile","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\tempfile-3.15.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","getrandom"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtempfile-a46debd386ebaaf9.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtempfile-a46debd386ebaaf9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#env_logger@0.10.2","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\env_logger-0.10.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"env_logger","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\env_logger-0.10.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["auto-color","color","default","humantime","regex"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libenv_logger-bd396d802d431df3.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libenv_logger-bd396d802d431df3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libloading@0.8.6","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\libloading-0.8.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libloading","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\libloading-0.8.6\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\liblibloading-636766a50c75ee8f.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\liblibloading-636766a50c75ee8f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bitflags@2.8.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\bitflags-2.8.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bitflags","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\bitflags-2.8.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libbitflags-8270d202f79ada6c.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libbitflags-8270d202f79ada6c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gtk4-sys@0.6.3","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gtk4-sys-0.6.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gtk4_sys","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gtk4-sys-0.6.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["v4_2","v4_4","v4_6","v4_8"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgtk4_sys-29583feef507b91e.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgtk4_sys-29583feef507b91e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\futures-core-0.3.31\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_core","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\futures-core-0.3.31\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfutures_core-d4e11926b9abd7d6.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfutures_core-d4e11926b9abd7d6.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-channel@0.3.31","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\futures-channel-0.3.31\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_channel","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\futures-channel-0.3.31\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","futures-sink","sink","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfutures_channel-b28865c9d5f50aef.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfutures_channel-b28865c9d5f50aef.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-stream-impl@0.3.6","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-stream-impl-0.3.6\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"async_stream_impl","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-stream-impl-0.3.6\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\async_stream_impl-6f7b557a2498e5f3.dll","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libasync_stream_impl-6f7b557a2498e5f3.dll.a"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-stream@0.3.6","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-stream-0.3.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_stream","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-stream-0.3.6\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libasync_stream-b383822b22689304.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libasync_stream-b383822b22689304.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.31","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\futures-util-0.3.31\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_util","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\futures-util-0.3.31\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","async-await","async-await-macro","channel","default","futures-channel","futures-io","futures-macro","futures-sink","io","memchr","sink","slab","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfutures_util-cdfab85d0abdc843.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfutures_util-cdfab85d0abdc843.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures@0.3.31","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\futures-0.3.31\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\futures-0.3.31\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","async-await","default","executor","futures-executor","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfutures-79799371779b0987.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfutures-79799371779b0987.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-executor@0.3.31","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\futures-executor-0.3.31\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_executor","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\futures-executor-0.3.31\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfutures_executor-69e15f6a7d091ea0.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libfutures_executor-69e15f6a7d091ea0.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-stream@0.1.17","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\tokio-stream-0.1.17\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_stream","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\tokio-stream-0.1.17\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","time"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtokio_stream-c5f3ef7b5c3c1093.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtokio_stream-c5f3ef7b5c3c1093.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio@1.43.0","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\tokio-1.43.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\tokio-1.43.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bytes","default","fs","full","io-std","io-util","libc","macros","mio","net","parking_lot","process","rt","rt-multi-thread","signal","signal-hook-registry","socket2","sync","test-util","time","tokio-macros","windows-sys"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtokio-60cb8495884d3543.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtokio-60cb8495884d3543.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-test@0.4.4","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\tokio-test-0.4.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_test","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\tokio-test-0.4.4\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtokio_test-8e4b8212fadadb70.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libtokio_test-8e4b8212fadadb70.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#glib@0.17.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\glib-0.17.10\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"glib","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\glib-0.17.10\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","gio","gio_ffi","v2_58","v2_60","v2_62","v2_64","v2_66"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libglib-9ef66bcdaba2658d.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libglib-9ef66bcdaba2658d.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cairo-rs@0.17.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cairo-rs-0.17.10\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cairo","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cairo-rs-0.17.10\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","glib","use_glib"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libcairo-8dfebc728dee84c8.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libcairo-8dfebc728dee84c8.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#graphene-rs@0.17.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\graphene-rs-0.17.10\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"graphene","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\graphene-rs-0.17.10\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgraphene-f9a51e197298d6c5.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgraphene-f9a51e197298d6c5.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gdk-pixbuf@0.17.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gdk-pixbuf-0.17.10\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gdk_pixbuf","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gdk-pixbuf-0.17.10\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgdk_pixbuf-b3cd16b26b0fca93.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgdk_pixbuf-b3cd16b26b0fca93.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gio@0.17.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gio-0.17.10\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gio","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gio-0.17.10\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["v2_58","v2_60","v2_62","v2_64","v2_66"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgio-a7d8f324b9dbfcc7.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgio-a7d8f324b9dbfcc7.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pango@0.17.10","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\pango-0.17.10\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pango","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\pango-0.17.10\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["v1_42","v1_44","v1_46","v1_48","v1_50"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libpango-e635ef5d682cc5a0.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libpango-e635ef5d682cc5a0.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gdk4@0.6.3","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gdk4-0.6.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gdk4","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gdk4-0.6.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["v4_2","v4_4","v4_6","v4_8"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgdk4-47a5e88de581c13f.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgdk4-47a5e88de581c13f.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gsk4@0.6.3","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gsk4-0.6.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gsk4","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gsk4-0.6.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["v4_2","v4_4","v4_6"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgsk4-8fed030f5467cb05.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgsk4-8fed030f5467cb05.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gtk4@0.6.6","manifest_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gtk4-0.6.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gtk4","src_path":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\gtk4-0.6.6\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["v4_2","v4_4","v4_6","v4_8"],"filenames":["C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgtk4-8bfe505342579f9a.rlib","C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\libgtk4-8bfe505342579f9a.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"test-gui","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\bin\\test-gui.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: use of undeclared crate or module `eventghost`\n --> src\\bin\\test-gui.rs:4:5\n  |\n4 | use eventghost::eg::classes::MainFrame;\n  |     ^^^^^^^^^^ use of undeclared crate or module `eventghost`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: use of undeclared crate or module `eventghost`","spans":[{"byte_end":87,"byte_start":77,"column_end":15,"column_start":5,"expansion":null,"file_name":"src\\bin\\test-gui.rs","is_primary":true,"label":"use of undeclared crate or module `eventghost`","line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":5,"text":"use eventghost::eg::classes::MainFrame;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"test-gui","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\bin\\test-gui.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"For more information about this error, try `rustc --explain E0433`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about this error, try `rustc --explain E0433`.","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0407]: method `terminate` is not a member of trait `Plugin`\n   --> src\\core\\action.rs:282:5\n    |\n282 | /     async fn terminate(&mut self) -> Result<(), Error> {\n283 | |         Ok(())\n284 | |     }\n    | |_____^ not a member of trait `Plugin`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0407","explanation":"A definition of a method not in the implemented trait was given in a trait\nimplementation.\n\nErroneous code example:\n\n```compile_fail,E0407\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // error: method `b` is not a member of trait `Foo`\n}\n```\n\nPlease verify you didn't misspell the method name and you used the correct\ntrait. First example:\n\n```\ntrait Foo {\n    fn a();\n    fn b();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // ok!\n}\n```\n\nSecond example:\n\n```\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n}\n\nimpl Bar {\n    fn b() {}\n}\n```\n"},"level":"error","message":"method `terminate` is not a member of trait `Plugin`","spans":[{"byte_end":7755,"byte_start":7680,"column_end":6,"column_start":5,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":"not a member of trait `Plugin`","line_end":284,"line_start":282,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":5,"text":"    async fn terminate(&mut self) -> Result<(), Error> {"},{"highlight_end":15,"highlight_start":1,"text":"        Ok(())"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0407]: method `terminate` is not a member of trait `Plugin`\n   --> src\\core\\actions\\flow\\delay.rs:110:9\n    |\n110 |         async fn terminate(&mut self) -> Result<(), Error> { Ok(()) }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a member of trait `Plugin`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0407","explanation":"A definition of a method not in the implemented trait was given in a trait\nimplementation.\n\nErroneous code example:\n\n```compile_fail,E0407\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // error: method `b` is not a member of trait `Foo`\n}\n```\n\nPlease verify you didn't misspell the method name and you used the correct\ntrait. First example:\n\n```\ntrait Foo {\n    fn a();\n    fn b();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // ok!\n}\n```\n\nSecond example:\n\n```\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n}\n\nimpl Bar {\n    fn b() {}\n}\n```\n"},"level":"error","message":"method `terminate` is not a member of trait `Plugin`","spans":[{"byte_end":3130,"byte_start":3069,"column_end":70,"column_start":9,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":"not a member of trait `Plugin`","line_end":110,"line_start":110,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":70,"highlight_start":9,"text":"        async fn terminate(&mut self) -> Result<(), Error> { Ok(()) }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0053]: method `initialize` has an incompatible type for trait\n   --> src\\core\\plugin\\traits.rs:201:5\n    |\n201 |     #[async_trait]\n    |     ^^^^^^^^^^^^^^ expected `PluginError`, found `core::error::Error`\n    |\nnote: type in trait\n   --> src\\core\\plugin\\traits.rs:86:1\n    |\n86  | #[async_trait]\n    | ^^^^^^^^^^^^^^\n    = note: expected signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n               found signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`\n    = note: this error originates in the attribute macro `async_trait` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: change the output type to match the trait\n    |\n201 |     std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"type in trait","rendered":null,"spans":[{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}]},{"children":[],"code":null,"level":"note","message":"expected signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"change the output type to match the trait","rendered":null,"spans":[{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":201,"line_start":201,"suggested_replacement":"std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}],"code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","message":"method `initialize` has an incompatible type for trait","spans":[{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":"expected `PluginError`, found `core::error::Error`","line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0053]: method `start` has an incompatible type for trait\n   --> src\\core\\plugin\\traits.rs:201:5\n    |\n201 |     #[async_trait]\n    |     ^^^^^^^^^^^^^^ expected `PluginError`, found `core::error::Error`\n    |\nnote: type in trait\n   --> src\\core\\plugin\\traits.rs:86:1\n    |\n86  | #[async_trait]\n    | ^^^^^^^^^^^^^^\n    = note: expected signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n               found signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`\n    = note: this error originates in the attribute macro `async_trait` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: change the output type to match the trait\n    |\n201 |     std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"type in trait","rendered":null,"spans":[{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}]},{"children":[],"code":null,"level":"note","message":"expected signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"change the output type to match the trait","rendered":null,"spans":[{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":201,"line_start":201,"suggested_replacement":"std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}],"code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","message":"method `start` has an incompatible type for trait","spans":[{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":"expected `PluginError`, found `core::error::Error`","line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0053]: method `stop` has an incompatible type for trait\n   --> src\\core\\plugin\\traits.rs:201:5\n    |\n201 |     #[async_trait]\n    |     ^^^^^^^^^^^^^^ expected `PluginError`, found `core::error::Error`\n    |\nnote: type in trait\n   --> src\\core\\plugin\\traits.rs:86:1\n    |\n86  | #[async_trait]\n    | ^^^^^^^^^^^^^^\n    = note: expected signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n               found signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`\n    = note: this error originates in the attribute macro `async_trait` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: change the output type to match the trait\n    |\n201 |     std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"type in trait","rendered":null,"spans":[{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}]},{"children":[],"code":null,"level":"note","message":"expected signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"change the output type to match the trait","rendered":null,"spans":[{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":201,"line_start":201,"suggested_replacement":"std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}],"code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","message":"method `stop` has an incompatible type for trait","spans":[{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":"expected `PluginError`, found `core::error::Error`","line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0053]: method `handle_event` has an incompatible type for trait\n   --> src\\core\\plugin\\traits.rs:201:5\n    |\n201 |     #[async_trait]\n    |     ^^^^^^^^^^^^^^ expected `PluginError`, found `core::error::Error`\n    |\nnote: type in trait\n   --> src\\core\\plugin\\traits.rs:86:1\n    |\n86  | #[async_trait]\n    | ^^^^^^^^^^^^^^\n    = note: expected signature `fn(&'life0 mut plugin::traits::tests::TestPlugin, &'life1 _) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n               found signature `fn(&'life0 mut plugin::traits::tests::TestPlugin, &'life1 _) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`\n    = note: this error originates in the attribute macro `async_trait` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: change the output type to match the trait\n    |\n201 |     std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"type in trait","rendered":null,"spans":[{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}]},{"children":[],"code":null,"level":"note","message":"expected signature `fn(&'life0 mut plugin::traits::tests::TestPlugin, &'life1 _) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 mut plugin::traits::tests::TestPlugin, &'life1 _) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"change the output type to match the trait","rendered":null,"spans":[{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":201,"line_start":201,"suggested_replacement":"std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}],"code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","message":"method `handle_event` has an incompatible type for trait","spans":[{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":"expected `PluginError`, found `core::error::Error`","line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0053]: method `update_config` has an incompatible type for trait\n   --> src\\core\\plugin\\traits.rs:201:5\n    |\n201 |     #[async_trait]\n    |     ^^^^^^^^^^^^^^ expected `PluginError`, found `core::error::Error`\n    |\nnote: type in trait\n   --> src\\core\\plugin\\traits.rs:86:1\n    |\n86  | #[async_trait]\n    | ^^^^^^^^^^^^^^\n    = note: expected signature `fn(&'life0 mut plugin::traits::tests::TestPlugin, core::config::Config) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n               found signature `fn(&'life0 mut plugin::traits::tests::TestPlugin, core::config::Config) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`\n    = note: this error originates in the attribute macro `async_trait` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: change the output type to match the trait\n    |\n201 |     std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"type in trait","rendered":null,"spans":[{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}]},{"children":[],"code":null,"level":"note","message":"expected signature `fn(&'life0 mut plugin::traits::tests::TestPlugin, core::config::Config) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 mut plugin::traits::tests::TestPlugin, core::config::Config) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"change the output type to match the trait","rendered":null,"spans":[{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":201,"line_start":201,"suggested_replacement":"std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}],"code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","message":"method `update_config` has an incompatible type for trait","spans":[{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":"expected `PluginError`, found `core::error::Error`","line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0053]: method `initialize` has an incompatible type for trait\n   --> src\\core\\action.rs:260:1\n    |\n260 | #[async_trait]\n    | ^^^^^^^^^^^^^^ expected `PluginError`, found `core::error::Error`\n    |\nnote: type in trait\n   --> src\\core\\plugin\\traits.rs:86:1\n    |\n86  | #[async_trait]\n    | ^^^^^^^^^^^^^^\n    = note: expected signature `fn(&'life0 mut DummyPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n               found signature `fn(&'life0 mut DummyPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`\n    = note: this error originates in the attribute macro `async_trait` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: change the output type to match the trait\n    |\n260 | std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"type in trait","rendered":null,"spans":[{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}]},{"children":[],"code":null,"level":"note","message":"expected signature `fn(&'life0 mut DummyPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 mut DummyPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"change the output type to match the trait","rendered":null,"spans":[{"byte_end":7295,"byte_start":7281,"column_end":15,"column_start":1,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":7295,"byte_start":7281,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":false,"label":null,"line_end":260,"line_start":260,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}},"file_name":"src\\core\\action.rs","is_primary":true,"label":null,"line_end":260,"line_start":260,"suggested_replacement":"std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}]}],"code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","message":"method `initialize` has an incompatible type for trait","spans":[{"byte_end":7295,"byte_start":7281,"column_end":15,"column_start":1,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":7295,"byte_start":7281,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":false,"label":null,"line_end":260,"line_start":260,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}},"file_name":"src\\core\\action.rs","is_primary":true,"label":"expected `PluginError`, found `core::error::Error`","line_end":260,"line_start":260,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0046]: not all trait items implemented, missing: `get_info`, `get_capabilities`, `get_state`, `start`, `stop`, `handle_event`, `get_config`, `update_config`, `as_any`, `clone_box`\n   --> src\\core\\action.rs:261:1\n    |\n261 | impl Plugin for DummyPlugin {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `get_info`, `get_capabilities`, `get_state`, `start`, `stop`, `handle_event`, `get_config`, `update_config`, `as_any`, `clone_box` in implementation\n    |\n   ::: src\\core\\plugin\\traits.rs:89:5\n    |\n89  |     fn get_info(&self) -> PluginInfo;\n    |     --------------------------------- `get_info` from trait\n...\n92  |     fn get_capabilities(&self) -> Vec<PluginCapability>;\n    |     ---------------------------------------------------- `get_capabilities` from trait\n...\n95  |     fn get_state(&self) -> PluginState;\n    |     ----------------------------------- `get_state` from trait\n...\n101 |     async fn start(&mut self) -> Result<(), PluginError>;\n    |     ----------------------------------------------------- `start` from trait\n...\n104 |     async fn stop(&mut self) -> Result<(), PluginError>;\n    |     ---------------------------------------------------- `stop` from trait\n...\n107 |     async fn handle_event(&mut self, event: &dyn Event) -> Result<(), PluginError>;\n    |     ------------------------------------------------------------------------------- `handle_event` from trait\n...\n110 |     fn get_config(&self) -> Option<&Config>;\n    |     ---------------------------------------- `get_config` from trait\n...\n113 |     async fn update_config(&mut self, config: Config) -> Result<(), PluginError>;\n    |     ----------------------------------------------------------------------------- `update_config` from trait\n...\n116 |     fn as_any(&self) -> &dyn Any;\n    |     ----------------------------- `as_any` from trait\n...\n131 |     fn clone_box(&self) -> Box<dyn Plugin>;\n    |     --------------------------------------- `clone_box` from trait\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn get_info(&self) -> plugin::traits::PluginInfo { todo!() }`","rendered":null,"spans":[{"byte_end":7757,"byte_start":7757,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":null,"line_end":285,"line_start":285,"suggested_replacement":"fn get_info(&self) -> plugin::traits::PluginInfo { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"} "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn get_capabilities(&self) -> Vec<plugin::traits::PluginCapability> { todo!() }`","rendered":null,"spans":[{"byte_end":7757,"byte_start":7757,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":null,"line_end":285,"line_start":285,"suggested_replacement":"fn get_capabilities(&self) -> Vec<plugin::traits::PluginCapability> { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"} "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn get_state(&self) -> plugin::traits::PluginState { todo!() }`","rendered":null,"spans":[{"byte_end":7757,"byte_start":7757,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":null,"line_end":285,"line_start":285,"suggested_replacement":"fn get_state(&self) -> plugin::traits::PluginState { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"} "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn start(&'life0 mut self) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }`","rendered":null,"spans":[{"byte_end":7757,"byte_start":7757,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":null,"line_end":285,"line_start":285,"suggested_replacement":"fn start(&'life0 mut self) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"} "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn stop(&'life0 mut self) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }`","rendered":null,"spans":[{"byte_end":7757,"byte_start":7757,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":null,"line_end":285,"line_start":285,"suggested_replacement":"fn stop(&'life0 mut self) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"} "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn handle_event(&'life0 mut self, _: &'life1 (dyn core::event::Event + 'static)) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }`","rendered":null,"spans":[{"byte_end":7757,"byte_start":7757,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":null,"line_end":285,"line_start":285,"suggested_replacement":"fn handle_event(&'life0 mut self, _: &'life1 (dyn core::event::Event + 'static)) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"} "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn get_config(&self) -> std::option::Option<&core::config::Config> { todo!() }`","rendered":null,"spans":[{"byte_end":7757,"byte_start":7757,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":null,"line_end":285,"line_start":285,"suggested_replacement":"fn get_config(&self) -> std::option::Option<&core::config::Config> { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"} "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn update_config(&'life0 mut self, _: core::config::Config) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }`","rendered":null,"spans":[{"byte_end":7757,"byte_start":7757,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":null,"line_end":285,"line_start":285,"suggested_replacement":"fn update_config(&'life0 mut self, _: core::config::Config) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"} "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn as_any(&self) -> &(dyn std::any::Any + 'static) { todo!() }`","rendered":null,"spans":[{"byte_end":7757,"byte_start":7757,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":null,"line_end":285,"line_start":285,"suggested_replacement":"fn as_any(&self) -> &(dyn std::any::Any + 'static) { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"} "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn clone_box(&self) -> std::boxed::Box<(dyn plugin::traits::Plugin + 'static)> { todo!() }`","rendered":null,"spans":[{"byte_end":7757,"byte_start":7757,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":null,"line_end":285,"line_start":285,"suggested_replacement":"fn clone_box(&self) -> std::boxed::Box<(dyn plugin::traits::Plugin + 'static)> { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"} "}]}]}],"code":{"code":"E0046","explanation":"Items are missing in a trait implementation.\n\nErroneous code example:\n\n```compile_fail,E0046\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {}\n// error: not all trait items implemented, missing: `foo`\n```\n\nWhen trying to make some type implement a trait `Foo`, you must, at minimum,\nprovide implementations for all of `Foo`'s required methods (meaning the\nmethods that do not have default implementations), as well as any required\ntrait items like associated types or constants. Example:\n\n```\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn foo() {} // ok!\n}\n```\n"},"level":"error","message":"not all trait items implemented, missing: `get_info`, `get_capabilities`, `get_state`, `start`, `stop`, `handle_event`, `get_config`, `update_config`, `as_any`, `clone_box`","spans":[{"byte_end":7324,"byte_start":7297,"column_end":28,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":"missing `get_info`, `get_capabilities`, `get_state`, `start`, `stop`, `handle_event`, `get_config`, `update_config`, `as_any`, `clone_box` in implementation","line_end":261,"line_start":261,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":1,"text":"impl Plugin for DummyPlugin {"}]},{"byte_end":2318,"byte_start":2285,"column_end":38,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`get_info` from trait","line_end":89,"line_start":89,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":5,"text":"    fn get_info(&self) -> PluginInfo;"}]},{"byte_end":2415,"byte_start":2363,"column_end":57,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`get_capabilities` from trait","line_end":92,"line_start":92,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":5,"text":"    fn get_capabilities(&self) -> Vec<PluginCapability>;"}]},{"byte_end":2496,"byte_start":2461,"column_end":40,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`get_state` from trait","line_end":95,"line_start":95,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":5,"text":"    fn get_state(&self) -> PluginState;"}]},{"byte_end":2688,"byte_start":2635,"column_end":58,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`start` from trait","line_end":101,"line_start":101,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":58,"highlight_start":5,"text":"    async fn start(&mut self) -> Result<(), PluginError>;"}]},{"byte_end":2777,"byte_start":2725,"column_end":57,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`stop` from trait","line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":5,"text":"    async fn stop(&mut self) -> Result<(), PluginError>;"}]},{"byte_end":2893,"byte_start":2814,"column_end":84,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`handle_event` from trait","line_end":107,"line_start":107,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":84,"highlight_start":5,"text":"    async fn handle_event(&mut self, event: &dyn Event) -> Result<(), PluginError>;"}]},{"byte_end":2979,"byte_start":2939,"column_end":45,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`get_config` from trait","line_end":110,"line_start":110,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":5,"text":"    fn get_config(&self) -> Option<&Config>;"}]},{"byte_end":3105,"byte_start":3028,"column_end":82,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`update_config` from trait","line_end":113,"line_start":113,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":82,"highlight_start":5,"text":"    async fn update_config(&mut self, config: Config) -> Result<(), PluginError>;"}]},{"byte_end":3195,"byte_start":3166,"column_end":34,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`as_any` from trait","line_end":116,"line_start":116,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":5,"text":"    fn as_any(&self) -> &dyn Any;"}]},{"byte_end":3544,"byte_start":3505,"column_end":44,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`clone_box` from trait","line_end":131,"line_start":131,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":5,"text":"    fn clone_box(&self) -> Box<dyn Plugin>;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `NotFound` found for enum `core::error::Error` in the current scope\n   --> src\\core\\action.rs:212:35\n    |\n212 |             .ok_or_else(|| Error::NotFound(format!(\"Action with ID {} not found\", action_id)))?;\n    |                                   ^^^^^^^^ variant or associated item not found in `Error`\n    |\n   ::: src\\core\\error.rs:4:1\n    |\n4   | pub enum Error {\n    | -------------- variant or associated item `NotFound` not found for this enum\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `NotFound` found for enum `core::error::Error` in the current scope","spans":[{"byte_end":5757,"byte_start":5749,"column_end":43,"column_start":35,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":"variant or associated item not found in `Error`","line_end":212,"line_start":212,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":35,"text":"            .ok_or_else(|| Error::NotFound(format!(\"Action with ID {} not found\", action_id)))?;"}]},{"byte_end":64,"byte_start":50,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\error.rs","is_primary":false,"label":"variant or associated item `NotFound` not found for this enum","line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"pub enum Error {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `InvalidOperation` found for enum `core::error::Error` in the current scope\n   --> src\\core\\action.rs:216:31\n    |\n216 |             return Err(Error::InvalidOperation(format!(\n    |                               ^^^^^^^^^^^^^^^^ variant or associated item not found in `Error`\n    |\n   ::: src\\core\\error.rs:4:1\n    |\n4   | pub enum Error {\n    | -------------- variant or associated item `InvalidOperation` not found for this enum\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `InvalidOperation` found for enum `core::error::Error` in the current scope","spans":[{"byte_end":5996,"byte_start":5980,"column_end":47,"column_start":31,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":"variant or associated item not found in `Error`","line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":31,"text":"            return Err(Error::InvalidOperation(format!("}]},{"byte_end":64,"byte_start":50,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\error.rs","is_primary":false,"label":"variant or associated item `InvalidOperation` not found for this enum","line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"pub enum Error {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0053]: method `initialize` has an incompatible type for trait\n   --> src\\core\\actions\\flow\\delay.rs:103:5\n    |\n103 |     #[async_trait]\n    |     ^^^^^^^^^^^^^^ expected `PluginError`, found `core::error::Error`\n    |\nnote: type in trait\n   --> src\\core\\plugin\\traits.rs:86:1\n    |\n86  | #[async_trait]\n    | ^^^^^^^^^^^^^^\n    = note: expected signature `fn(&'life0 mut delay::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n               found signature `fn(&'life0 mut delay::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`\n    = note: this error originates in the attribute macro `async_trait` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: change the output type to match the trait\n    |\n103 |     std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"type in trait","rendered":null,"spans":[{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}]},{"children":[],"code":null,"level":"note","message":"expected signature `fn(&'life0 mut delay::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 mut delay::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"change the output type to match the trait","rendered":null,"spans":[{"byte_end":2738,"byte_start":2724,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":2738,"byte_start":2724,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":false,"label":null,"line_end":103,"line_start":103,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":103,"line_start":103,"suggested_replacement":"std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}],"code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","message":"method `initialize` has an incompatible type for trait","spans":[{"byte_end":2738,"byte_start":2724,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":2738,"byte_start":2724,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":false,"label":null,"line_end":103,"line_start":103,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":"expected `PluginError`, found `core::error::Error`","line_end":103,"line_start":103,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0046]: not all trait items implemented, missing: `get_info`, `get_capabilities`, `get_state`, `start`, `stop`, `handle_event`, `get_config`, `update_config`, `as_any`, `clone_box`\n   --> src\\core\\actions\\flow\\delay.rs:104:5\n    |\n104 |     impl Plugin for TestPlugin {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `get_info`, `get_capabilities`, `get_state`, `start`, `stop`, `handle_event`, `get_config`, `update_config`, `as_any`, `clone_box` in implementation\n    |\n   ::: src\\core\\plugin\\traits.rs:89:5\n    |\n89  |     fn get_info(&self) -> PluginInfo;\n    |     --------------------------------- `get_info` from trait\n...\n92  |     fn get_capabilities(&self) -> Vec<PluginCapability>;\n    |     ---------------------------------------------------- `get_capabilities` from trait\n...\n95  |     fn get_state(&self) -> PluginState;\n    |     ----------------------------------- `get_state` from trait\n...\n101 |     async fn start(&mut self) -> Result<(), PluginError>;\n    |     ----------------------------------------------------- `start` from trait\n...\n104 |     async fn stop(&mut self) -> Result<(), PluginError>;\n    |     ---------------------------------------------------- `stop` from trait\n...\n107 |     async fn handle_event(&mut self, event: &dyn Event) -> Result<(), PluginError>;\n    |     ------------------------------------------------------------------------------- `handle_event` from trait\n...\n110 |     fn get_config(&self) -> Option<&Config>;\n    |     ---------------------------------------- `get_config` from trait\n...\n113 |     async fn update_config(&mut self, config: Config) -> Result<(), PluginError>;\n    |     ----------------------------------------------------------------------------- `update_config` from trait\n...\n116 |     fn as_any(&self) -> &dyn Any;\n    |     ----------------------------- `as_any` from trait\n...\n131 |     fn clone_box(&self) -> Box<dyn Plugin>;\n    |     --------------------------------------- `clone_box` from trait\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn get_info(&self) -> plugin::traits::PluginInfo { todo!() }`","rendered":null,"spans":[{"byte_end":3136,"byte_start":3136,"column_end":5,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":"    fn get_info(&self) -> plugin::traits::PluginInfo { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    }"}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn get_capabilities(&self) -> Vec<plugin::traits::PluginCapability> { todo!() }`","rendered":null,"spans":[{"byte_end":3136,"byte_start":3136,"column_end":5,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":"    fn get_capabilities(&self) -> Vec<plugin::traits::PluginCapability> { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    }"}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn get_state(&self) -> plugin::traits::PluginState { todo!() }`","rendered":null,"spans":[{"byte_end":3136,"byte_start":3136,"column_end":5,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":"    fn get_state(&self) -> plugin::traits::PluginState { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    }"}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn start(&'life0 mut self) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }`","rendered":null,"spans":[{"byte_end":3136,"byte_start":3136,"column_end":5,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":"    fn start(&'life0 mut self) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    }"}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn stop(&'life0 mut self) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }`","rendered":null,"spans":[{"byte_end":3136,"byte_start":3136,"column_end":5,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":"    fn stop(&'life0 mut self) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    }"}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn handle_event(&'life0 mut self, _: &'life1 (dyn core::event::Event + 'static)) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }`","rendered":null,"spans":[{"byte_end":3136,"byte_start":3136,"column_end":5,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":"    fn handle_event(&'life0 mut self, _: &'life1 (dyn core::event::Event + 'static)) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    }"}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn get_config(&self) -> std::option::Option<&core::config::Config> { todo!() }`","rendered":null,"spans":[{"byte_end":3136,"byte_start":3136,"column_end":5,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":"    fn get_config(&self) -> std::option::Option<&core::config::Config> { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    }"}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn update_config(&'life0 mut self, _: core::config::Config) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }`","rendered":null,"spans":[{"byte_end":3136,"byte_start":3136,"column_end":5,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":"    fn update_config(&'life0 mut self, _: core::config::Config) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    }"}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn as_any(&self) -> &(dyn std::any::Any + 'static) { todo!() }`","rendered":null,"spans":[{"byte_end":3136,"byte_start":3136,"column_end":5,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":"    fn as_any(&self) -> &(dyn std::any::Any + 'static) { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    }"}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn clone_box(&self) -> std::boxed::Box<(dyn plugin::traits::Plugin + 'static)> { todo!() }`","rendered":null,"spans":[{"byte_end":3136,"byte_start":3136,"column_end":5,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":"    fn clone_box(&self) -> std::boxed::Box<(dyn plugin::traits::Plugin + 'static)> { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    }"}]}]}],"code":{"code":"E0046","explanation":"Items are missing in a trait implementation.\n\nErroneous code example:\n\n```compile_fail,E0046\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {}\n// error: not all trait items implemented, missing: `foo`\n```\n\nWhen trying to make some type implement a trait `Foo`, you must, at minimum,\nprovide implementations for all of `Foo`'s required methods (meaning the\nmethods that do not have default implementations), as well as any required\ntrait items like associated types or constants. Example:\n\n```\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn foo() {} // ok!\n}\n```\n"},"level":"error","message":"not all trait items implemented, missing: `get_info`, `get_capabilities`, `get_state`, `start`, `stop`, `handle_event`, `get_config`, `update_config`, `as_any`, `clone_box`","spans":[{"byte_end":2770,"byte_start":2744,"column_end":31,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":"missing `get_info`, `get_capabilities`, `get_state`, `start`, `stop`, `handle_event`, `get_config`, `update_config`, `as_any`, `clone_box` in implementation","line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":5,"text":"    impl Plugin for TestPlugin {"}]},{"byte_end":2318,"byte_start":2285,"column_end":38,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`get_info` from trait","line_end":89,"line_start":89,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":5,"text":"    fn get_info(&self) -> PluginInfo;"}]},{"byte_end":2415,"byte_start":2363,"column_end":57,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`get_capabilities` from trait","line_end":92,"line_start":92,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":5,"text":"    fn get_capabilities(&self) -> Vec<PluginCapability>;"}]},{"byte_end":2496,"byte_start":2461,"column_end":40,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`get_state` from trait","line_end":95,"line_start":95,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":5,"text":"    fn get_state(&self) -> PluginState;"}]},{"byte_end":2688,"byte_start":2635,"column_end":58,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`start` from trait","line_end":101,"line_start":101,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":58,"highlight_start":5,"text":"    async fn start(&mut self) -> Result<(), PluginError>;"}]},{"byte_end":2777,"byte_start":2725,"column_end":57,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`stop` from trait","line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":5,"text":"    async fn stop(&mut self) -> Result<(), PluginError>;"}]},{"byte_end":2893,"byte_start":2814,"column_end":84,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`handle_event` from trait","line_end":107,"line_start":107,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":84,"highlight_start":5,"text":"    async fn handle_event(&mut self, event: &dyn Event) -> Result<(), PluginError>;"}]},{"byte_end":2979,"byte_start":2939,"column_end":45,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`get_config` from trait","line_end":110,"line_start":110,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":5,"text":"    fn get_config(&self) -> Option<&Config>;"}]},{"byte_end":3105,"byte_start":3028,"column_end":82,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`update_config` from trait","line_end":113,"line_start":113,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":82,"highlight_start":5,"text":"    async fn update_config(&mut self, config: Config) -> Result<(), PluginError>;"}]},{"byte_end":3195,"byte_start":3166,"column_end":34,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`as_any` from trait","line_end":116,"line_start":116,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":5,"text":"    fn as_any(&self) -> &dyn Any;"}]},{"byte_end":3544,"byte_start":3505,"column_end":44,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`clone_box` from trait","line_end":131,"line_start":131,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":5,"text":"    fn clone_box(&self) -> Box<dyn Plugin>;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0046]: not all trait items implemented, missing: `clone_event`\n   --> src\\core\\actions\\flow\\delay.rs:118:5\n    |\n118 |     impl Event for TestEvent {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ missing `clone_event` in implementation\n    |\n   ::: src\\core\\event.rs:51:5\n    |\n51  |     fn clone_event(&self) -> Box<dyn Event + Send + Sync>;\n    |     ------------------------------------------------------ `clone_event` from trait\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn clone_event(&self) -> std::boxed::Box<(dyn core::event::Event + std::marker::Send + Sync + 'static)> { todo!() }`","rendered":null,"spans":[{"byte_end":3800,"byte_start":3800,"column_end":5,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":130,"line_start":130,"suggested_replacement":"    fn clone_event(&self) -> std::boxed::Box<(dyn core::event::Event + std::marker::Send + Sync + 'static)> { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    }"}]}]}],"code":{"code":"E0046","explanation":"Items are missing in a trait implementation.\n\nErroneous code example:\n\n```compile_fail,E0046\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {}\n// error: not all trait items implemented, missing: `foo`\n```\n\nWhen trying to make some type implement a trait `Foo`, you must, at minimum,\nprovide implementations for all of `Foo`'s required methods (meaning the\nmethods that do not have default implementations), as well as any required\ntrait items like associated types or constants. Example:\n\n```\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn foo() {} // ok!\n}\n```\n"},"level":"error","message":"not all trait items implemented, missing: `clone_event`","spans":[{"byte_end":3256,"byte_start":3232,"column_end":29,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":"missing `clone_event` in implementation","line_end":118,"line_start":118,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"    impl Event for TestEvent {"}]},{"byte_end":1415,"byte_start":1361,"column_end":59,"column_start":5,"expansion":null,"file_name":"src\\core\\event.rs","is_primary":false,"label":"`clone_event` from trait","line_end":51,"line_start":51,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":5,"text":"    fn clone_event(&self) -> Box<dyn Event + Send + Sync>;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: could not find `testing` in the crate root\n   --> src\\core\\event.rs:209:16\n    |\n209 |     use crate::testing::mocks::MockEvent;\n    |                ^^^^^^^ could not find `testing` in the crate root\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: could not find `testing` in the crate root","spans":[{"byte_end":6815,"byte_start":6808,"column_end":23,"column_start":16,"expansion":null,"file_name":"src\\core\\event.rs","is_primary":true,"label":"could not find `testing` in the crate root","line_end":209,"line_start":209,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":16,"text":"    use crate::testing::mocks::MockEvent;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: could not find `testing` in the crate root\n   --> src\\core\\plugin\\registry.rs:358:16\n    |\n358 |     use crate::testing::mocks::MockPlugin;\n    |                ^^^^^^^ could not find `testing` in the crate root\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: could not find `testing` in the crate root","spans":[{"byte_end":12762,"byte_start":12755,"column_end":23,"column_start":16,"expansion":null,"file_name":"src\\core\\plugin\\registry.rs","is_primary":true,"label":"could not find `testing` in the crate root","line_end":358,"line_start":358,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":16,"text":"    use crate::testing::mocks::MockPlugin;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0407]: method `terminate` is not a member of trait `Plugin`\n   --> src\\core\\action.rs:282:5\n    |\n282 | /     async fn terminate(&mut self) -> Result<(), Error> {\n283 | |         Ok(())\n284 | |     }\n    | |_____^ not a member of trait `Plugin`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0407","explanation":"A definition of a method not in the implemented trait was given in a trait\nimplementation.\n\nErroneous code example:\n\n```compile_fail,E0407\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // error: method `b` is not a member of trait `Foo`\n}\n```\n\nPlease verify you didn't misspell the method name and you used the correct\ntrait. First example:\n\n```\ntrait Foo {\n    fn a();\n    fn b();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // ok!\n}\n```\n\nSecond example:\n\n```\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n}\n\nimpl Bar {\n    fn b() {}\n}\n```\n"},"level":"error","message":"method `terminate` is not a member of trait `Plugin`","spans":[{"byte_end":7755,"byte_start":7680,"column_end":6,"column_start":5,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":"not a member of trait `Plugin`","line_end":284,"line_start":282,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":5,"text":"    async fn terminate(&mut self) -> Result<(), Error> {"},{"highlight_end":15,"highlight_start":1,"text":"        Ok(())"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0407]: method `terminate` is not a member of trait `Plugin`\n   --> src\\core\\actions\\flow\\delay.rs:110:9\n    |\n110 |         async fn terminate(&mut self) -> Result<(), Error> { Ok(()) }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a member of trait `Plugin`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0407","explanation":"A definition of a method not in the implemented trait was given in a trait\nimplementation.\n\nErroneous code example:\n\n```compile_fail,E0407\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // error: method `b` is not a member of trait `Foo`\n}\n```\n\nPlease verify you didn't misspell the method name and you used the correct\ntrait. First example:\n\n```\ntrait Foo {\n    fn a();\n    fn b();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // ok!\n}\n```\n\nSecond example:\n\n```\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n}\n\nimpl Bar {\n    fn b() {}\n}\n```\n"},"level":"error","message":"method `terminate` is not a member of trait `Plugin`","spans":[{"byte_end":3130,"byte_start":3069,"column_end":70,"column_start":9,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":"not a member of trait `Plugin`","line_end":110,"line_start":110,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":70,"highlight_start":9,"text":"        async fn terminate(&mut self) -> Result<(), Error> { Ok(()) }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0195]: lifetime parameters or bounds on method `handle_event` do not match the trait declaration\n   --> src\\testing\\mocks.rs:182:20\n    |\n182 |     fn handle_event(&mut self, event: &dyn Event) -> Result<(), Error> {\n    |                    ^ lifetimes do not match method in trait\n    |\n   ::: src\\core\\event.rs:60:1\n    |\n60  | #[async_trait]\n    | -------------- this bound might be missing in the impl\n...\n63  |     async fn handle_event(&mut self, event: &dyn Event) -> Result<(), Error>;\n    |              ------------------------------------------ lifetimes in impl do not match this method in trait\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0195","explanation":"The lifetime parameters of the method do not match the trait declaration.\n\nErroneous code example:\n\n```compile_fail,E0195\ntrait Trait {\n    fn bar<'a,'b:'a>(x: &'a str, y: &'b str);\n}\n\nstruct Foo;\n\nimpl Trait for Foo {\n    fn bar<'a,'b>(x: &'a str, y: &'b str) {\n    // error: lifetime parameters or bounds on method `bar`\n    // do not match the trait declaration\n    }\n}\n```\n\nThe lifetime constraint `'b` for `bar()` implementation does not match the\ntrait declaration. Ensure lifetime declarations match exactly in both trait\ndeclaration and implementation. Example:\n\n```\ntrait Trait {\n    fn t<'a,'b:'a>(x: &'a str, y: &'b str);\n}\n\nstruct Foo;\n\nimpl Trait for Foo {\n    fn t<'a,'b:'a>(x: &'a str, y: &'b str) { // ok!\n    }\n}\n```\n"},"level":"error","message":"lifetime parameters or bounds on method `handle_event` do not match the trait declaration","spans":[{"byte_end":4240,"byte_start":4240,"column_end":20,"column_start":20,"expansion":null,"file_name":"src\\testing\\mocks.rs","is_primary":true,"label":"lifetimes do not match method in trait","line_end":182,"line_start":182,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":20,"text":"    fn handle_event(&mut self, event: &dyn Event) -> Result<(), Error> {"}]},{"byte_end":1675,"byte_start":1633,"column_end":56,"column_start":14,"expansion":null,"file_name":"src\\core\\event.rs","is_primary":false,"label":"lifetimes in impl do not match this method in trait","line_end":63,"line_start":63,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":14,"text":"    async fn handle_event(&mut self, event: &dyn Event) -> Result<(), Error>;"}]},{"byte_end":1554,"byte_start":1540,"column_end":15,"column_start":1,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":1554,"byte_start":1540,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\event.rs","is_primary":false,"label":null,"line_end":60,"line_start":60,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}},"file_name":"src\\core\\event.rs","is_primary":false,"label":"this bound might be missing in the impl","line_end":60,"line_start":60,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0046]: not all trait items implemented, missing: `get_id`, `get_supported_event_types`\n   --> src\\testing\\mocks.rs:181:1\n    |\n181 | impl EventHandler for MockEventHandler {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `get_id`, `get_supported_event_types` in implementation\n    |\n   ::: src\\core\\event.rs:66:5\n    |\n66  |     fn get_id(&self) -> &str;\n    |     ------------------------- `get_id` from trait\n...\n69  |     fn get_supported_event_types(&self) -> Vec<EventType>;\n    |     ------------------------------------------------------ `get_supported_event_types` from trait\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn get_id(&self) -> &str { todo!() }`","rendered":null,"spans":[{"byte_end":4515,"byte_start":4515,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\testing\\mocks.rs","is_primary":true,"label":null,"line_end":191,"line_start":191,"suggested_replacement":"fn get_id(&self) -> &str { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"}"}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn get_supported_event_types(&self) -> Vec<core::event::EventType> { todo!() }`","rendered":null,"spans":[{"byte_end":4515,"byte_start":4515,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\testing\\mocks.rs","is_primary":true,"label":null,"line_end":191,"line_start":191,"suggested_replacement":"fn get_supported_event_types(&self) -> Vec<core::event::EventType> { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"}"}]}]}],"code":{"code":"E0046","explanation":"Items are missing in a trait implementation.\n\nErroneous code example:\n\n```compile_fail,E0046\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {}\n// error: not all trait items implemented, missing: `foo`\n```\n\nWhen trying to make some type implement a trait `Foo`, you must, at minimum,\nprovide implementations for all of `Foo`'s required methods (meaning the\nmethods that do not have default implementations), as well as any required\ntrait items like associated types or constants. Example:\n\n```\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn foo() {} // ok!\n}\n```\n"},"level":"error","message":"not all trait items implemented, missing: `get_id`, `get_supported_event_types`","spans":[{"byte_end":4217,"byte_start":4179,"column_end":39,"column_start":1,"expansion":null,"file_name":"src\\testing\\mocks.rs","is_primary":true,"label":"missing `get_id`, `get_supported_event_types` in implementation","line_end":181,"line_start":181,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":1,"text":"impl EventHandler for MockEventHandler {"}]},{"byte_end":1786,"byte_start":1761,"column_end":30,"column_start":5,"expansion":null,"file_name":"src\\core\\event.rs","is_primary":false,"label":"`get_id` from trait","line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":5,"text":"    fn get_id(&self) -> &str;"}]},{"byte_end":1903,"byte_start":1849,"column_end":59,"column_start":5,"expansion":null,"file_name":"src\\core\\event.rs","is_primary":false,"label":"`get_supported_event_types` from trait","line_end":69,"line_start":69,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":5,"text":"    fn get_supported_event_types(&self) -> Vec<EventType>;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> src\\core\\event.rs:217:30\n    |\n217 |         let event = Box::new(MockEvent::new(\n    |                              ^^^^^^^^^^^^^^\n218 |             \"test_event\",\n    |             ------------ unexpected argument #1 of type `&'static str`\n    |\nnote: associated function defined here\n   --> src\\testing\\mocks.rs:117:12\n    |\n117 |     pub fn new(event_type: EventType, payload: EventPayload) -> Self {\n    |            ^^^ ---------------------  ---------------------\nhelp: remove the extra argument\n    |\n218 -             \"test_event\",\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":2823,"byte_start":2802,"column_end":37,"column_start":16,"expansion":null,"file_name":"src\\testing\\mocks.rs","is_primary":false,"label":"","line_end":117,"line_start":117,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":16,"text":"    pub fn new(event_type: EventType, payload: EventPayload) -> Self {"}]},{"byte_end":2846,"byte_start":2825,"column_end":60,"column_start":39,"expansion":null,"file_name":"src\\testing\\mocks.rs","is_primary":false,"label":"","line_end":117,"line_start":117,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":39,"text":"    pub fn new(event_type: EventType, payload: EventPayload) -> Self {"}]},{"byte_end":2801,"byte_start":2798,"column_end":15,"column_start":12,"expansion":null,"file_name":"src\\testing\\mocks.rs","is_primary":true,"label":null,"line_end":117,"line_start":117,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":12,"text":"    pub fn new(event_type: EventType, payload: EventPayload) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"remove the extra argument","rendered":null,"spans":[{"byte_end":7096,"byte_start":7069,"column_end":13,"column_start":13,"expansion":null,"file_name":"src\\core\\event.rs","is_primary":true,"label":null,"line_end":219,"line_start":218,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":26,"highlight_start":13,"text":"            \"test_event\","},{"highlight_end":13,"highlight_start":1,"text":"            EventType::System,"}]}]}],"code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","message":"this function takes 2 arguments but 3 arguments were supplied","spans":[{"byte_end":7081,"byte_start":7069,"column_end":25,"column_start":13,"expansion":null,"file_name":"src\\core\\event.rs","is_primary":false,"label":"unexpected argument #1 of type `&'static str`","line_end":218,"line_start":218,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":13,"text":"            \"test_event\","}]},{"byte_end":7054,"byte_start":7040,"column_end":44,"column_start":30,"expansion":null,"file_name":"src\\core\\event.rs","is_primary":true,"label":null,"line_end":217,"line_start":217,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":30,"text":"        let event = Box::new(MockEvent::new("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: the method `clone` exists for struct `Box<MockEvent>`, but its trait bounds were not satisfied\n   --> src\\core\\event.rs:227:37\n    |\n227 |           manager.process_event(event.clone()).await.unwrap();\n    |                                       ^^^^^ method cannot be called on `Box<MockEvent>` due to unsatisfied trait bounds\n    |\n   ::: src\\testing\\mocks.rs:108:1\n    |\n108 |   pub struct MockEvent {\n    |   -------------------- doesn't satisfy `mocks::MockEvent: Clone`\n    |\n   ::: C:\\ProgramData\\chocolatey\\lib\\rust\\tools\\lib/rustlib/src/rust\\library\\alloc\\src\\boxed.rs:233:1\n    |\n233 | / pub struct Box<\n234 | |     T: ?Sized,\n235 | |     #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,\n236 | | >(Unique<T>, A);\n    | |_- doesn't satisfy `std::boxed::Box<mocks::MockEvent>: Clone`\n    |\n    = note: the following trait bounds were not satisfied:\n            `mocks::MockEvent: Clone`\n            which is required by `std::boxed::Box<mocks::MockEvent>: Clone`\nhelp: consider annotating `mocks::MockEvent` with `#[derive(Clone)]`\n   --> src\\testing\\mocks.rs:108:1\n    |\n108 + #[derive(Clone)]\n109 | pub struct MockEvent {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the following trait bounds were not satisfied:\n`mocks::MockEvent: Clone`\nwhich is required by `std::boxed::Box<mocks::MockEvent>: Clone`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider annotating `mocks::MockEvent` with `#[derive(Clone)]`","rendered":null,"spans":[{"byte_end":2605,"byte_start":2605,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\testing\\mocks.rs","is_primary":true,"label":null,"line_end":108,"line_start":108,"suggested_replacement":"#[derive(Clone)]\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"pub struct MockEvent {"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"the method `clone` exists for struct `Box<MockEvent>`, but its trait bounds were not satisfied","spans":[{"byte_end":7360,"byte_start":7355,"column_end":42,"column_start":37,"expansion":null,"file_name":"src\\core\\event.rs","is_primary":true,"label":"method cannot be called on `Box<MockEvent>` due to unsatisfied trait bounds","line_end":227,"line_start":227,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":37,"text":"        manager.process_event(event.clone()).await.unwrap();"}]},{"byte_end":2625,"byte_start":2605,"column_end":21,"column_start":1,"expansion":null,"file_name":"src\\testing\\mocks.rs","is_primary":false,"label":"doesn't satisfy `mocks::MockEvent: Clone`","line_end":108,"line_start":108,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":1,"text":"pub struct MockEvent {"}]},{"byte_end":9117,"byte_start":9002,"column_end":2,"column_start":1,"expansion":null,"file_name":"C:\\ProgramData\\chocolatey\\lib\\rust\\tools\\lib/rustlib/src/rust\\library\\alloc\\src\\boxed.rs","is_primary":false,"label":"doesn't satisfy `std::boxed::Box<mocks::MockEvent>: Clone`","line_end":236,"line_start":233,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":1,"text":"pub struct Box<"},{"highlight_end":15,"highlight_start":1,"text":"    T: ?Sized,"},{"highlight_end":83,"highlight_start":1,"text":"    #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,"},{"highlight_end":2,"highlight_start":1,"text":">(Unique<T>, A);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src\\core\\plugin\\registry.rs:387:39\n    |\n387 |         let id = registry.load_plugin(plugin_path.clone()).await.unwrap();\n    |                           ----------- ^^^^^^^^^^^^^^^^^^^ expected `&Path`, found `PathBuf`\n    |                           |\n    |                           arguments to this method are incorrect\n    |\nnote: method defined here\n   --> src\\core\\plugin\\registry.rs:136:18\n    |\n136 |     pub async fn load_plugin(&self, path: &Path) -> Result<Uuid, RegistryError> {\n    |                  ^^^^^^^^^^^        -----------\nhelp: consider borrowing here\n    |\n387 |         let id = registry.load_plugin(&plugin_path.clone()).await.unwrap();\n    |                                       +\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":4653,"byte_start":4642,"column_end":48,"column_start":37,"expansion":null,"file_name":"src\\core\\plugin\\registry.rs","is_primary":false,"label":"","line_end":136,"line_start":136,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":37,"text":"    pub async fn load_plugin(&self, path: &Path) -> Result<Uuid, RegistryError> {"}]},{"byte_end":4634,"byte_start":4623,"column_end":29,"column_start":18,"expansion":null,"file_name":"src\\core\\plugin\\registry.rs","is_primary":true,"label":null,"line_end":136,"line_start":136,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":18,"text":"    pub async fn load_plugin(&self, path: &Path) -> Result<Uuid, RegistryError> {"}]}]},{"children":[],"code":null,"level":"help","message":"consider borrowing here","rendered":null,"spans":[{"byte_end":13793,"byte_start":13793,"column_end":39,"column_start":39,"expansion":null,"file_name":"src\\core\\plugin\\registry.rs","is_primary":true,"label":null,"line_end":387,"line_start":387,"suggested_replacement":"&","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":39,"highlight_start":39,"text":"        let id = registry.load_plugin(plugin_path.clone()).await.unwrap();"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":13812,"byte_start":13793,"column_end":58,"column_start":39,"expansion":null,"file_name":"src\\core\\plugin\\registry.rs","is_primary":true,"label":"expected `&Path`, found `PathBuf`","line_end":387,"line_start":387,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":58,"highlight_start":39,"text":"        let id = registry.load_plugin(plugin_path.clone()).await.unwrap();"}]},{"byte_end":13792,"byte_start":13781,"column_end":38,"column_start":27,"expansion":null,"file_name":"src\\core\\plugin\\registry.rs","is_primary":false,"label":"arguments to this method are incorrect","line_end":387,"line_start":387,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"        let id = registry.load_plugin(plugin_path.clone()).await.unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `dyn std::any::Any + std::marker::Send + Sync: Clone` is not satisfied\n  --> src\\core\\action.rs:15:5\n   |\n11 | #[derive(Debug, Clone)]\n   |                 ----- in this derive macro expansion\n...\n15 |     pub data: Option<Box<dyn Any + Send + Sync>>,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `dyn std::any::Any + std::marker::Send + Sync`\n   |\n   = note: required for `std::boxed::Box<dyn std::any::Any + std::marker::Send + Sync>` to implement `Clone`\n   = note: 1 redundant requirement hidden\n   = note: required for `std::option::Option<std::boxed::Box<dyn std::any::Any + std::marker::Send + Sync>>` to implement `Clone`\n   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"required for `std::boxed::Box<dyn std::any::Any + std::marker::Send + Sync>` to implement `Clone`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `std::option::Option<std::boxed::Box<dyn std::any::Any + std::marker::Send + Sync>>` to implement `Clone`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `dyn std::any::Any + std::marker::Send + Sync: Clone` is not satisfied","spans":[{"byte_end":425,"byte_start":381,"column_end":49,"column_start":5,"expansion":{"def_site_span":{"byte_end":5973,"byte_start":5958,"column_end":16,"column_start":1,"expansion":null,"file_name":"C:\\ProgramData\\chocolatey\\lib\\rust\\tools\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs","is_primary":false,"label":null,"line_end":183,"line_start":183,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":1,"text":"pub macro Clone($item:item) {"}]},"macro_decl_name":"#[derive(Clone)]","span":{"byte_end":288,"byte_start":283,"column_end":22,"column_start":17,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":false,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"src\\core\\action.rs","is_primary":true,"label":"the trait `Clone` is not implemented for `dyn std::any::Any + std::marker::Send + Sync`","line_end":15,"line_start":15,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":5,"text":"    pub data: Option<Box<dyn Any + Send + Sync>>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: `(dyn plugin::traits::Plugin + 'static)` doesn't implement `std::fmt::Debug`\n   --> src\\core\\action.rs:120:5\n    |\n115 | #[derive(Debug)]\n    |          ----- in this derive macro expansion\n...\n120 |     pub plugin: Arc<dyn Plugin>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn plugin::traits::Plugin + 'static)` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n    = help: the trait `std::fmt::Debug` is not implemented for `(dyn plugin::traits::Plugin + 'static)`\n    = help: the following other types implement trait `std::fmt::Debug`:\n              dyn std::any::Any + std::marker::Send + Sync\n              dyn std::any::Any + std::marker::Send\n              dyn std::any::Any\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `std::fmt::Debug` is not implemented for `(dyn plugin::traits::Plugin + 'static)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `std::fmt::Debug`:\n  dyn std::any::Any + std::marker::Send + Sync\n  dyn std::any::Any + std::marker::Send\n  dyn std::any::Any","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`(dyn plugin::traits::Plugin + 'static)` doesn't implement `std::fmt::Debug`","spans":[{"byte_end":3172,"byte_start":3145,"column_end":32,"column_start":5,"expansion":{"def_site_span":{"byte_end":21917,"byte_start":21902,"column_end":20,"column_start":5,"expansion":null,"file_name":"C:\\ProgramData\\chocolatey\\lib\\rust\\tools\\lib/rustlib/src/rust\\library\\core\\src\\fmt\\mod.rs","is_primary":false,"label":null,"line_end":650,"line_start":650,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":5,"text":"    pub macro Debug($item:item) {"}]},"macro_decl_name":"#[derive(Debug)]","span":{"byte_end":3014,"byte_start":3009,"column_end":15,"column_start":10,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":false,"label":null,"line_end":115,"line_start":115,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Debug)]"}]}},"file_name":"src\\core\\action.rs","is_primary":true,"label":"`(dyn plugin::traits::Plugin + 'static)` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`","line_end":120,"line_start":120,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":5,"text":"    pub plugin: Arc<dyn Plugin>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `core::action::ActionGroup: std::default::Default` is not satisfied\n   --> src\\core\\action.rs:190:5\n    |\n188 | #[derive(Default)]\n    |          ------- in this derive macro expansion\n189 | pub struct ActionManager {\n190 |     root_group: ActionGroup,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `core::action::ActionGroup`\n    |\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `core::action::ActionGroup: std::default::Default` is not satisfied","spans":[{"byte_end":5141,"byte_start":5118,"column_end":28,"column_start":5,"expansion":{"def_site_span":{"byte_end":3645,"byte_start":3628,"column_end":18,"column_start":1,"expansion":null,"file_name":"C:\\ProgramData\\chocolatey\\lib\\rust\\tools\\lib/rustlib/src/rust\\library\\core\\src\\default.rs","is_primary":false,"label":null,"line_end":146,"line_start":146,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":1,"text":"pub macro Default($item:item) {"}]},"macro_decl_name":"#[derive(Default)]","span":{"byte_end":5082,"byte_start":5075,"column_end":17,"column_start":10,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":false,"label":null,"line_end":188,"line_start":188,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":10,"text":"#[derive(Default)]"}]}},"file_name":"src\\core\\action.rs","is_primary":true,"label":"the trait `std::default::Default` is not implemented for `core::action::ActionGroup`","line_end":190,"line_start":190,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":5,"text":"    root_group: ActionGroup,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: `(dyn plugin::traits::Plugin + 'static)` doesn't implement `std::fmt::Debug`\n  --> src\\core\\actions\\flow\\delay.rs:14:5\n   |\n11 | #[derive(Debug)]\n   |          ----- in this derive macro expansion\n...\n14 |     plugin: Arc<dyn Plugin>,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^ `(dyn plugin::traits::Plugin + 'static)` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n   |\n   = help: the trait `std::fmt::Debug` is not implemented for `(dyn plugin::traits::Plugin + 'static)`\n   = help: the following other types implement trait `std::fmt::Debug`:\n             dyn std::any::Any + std::marker::Send + Sync\n             dyn std::any::Any + std::marker::Send\n             dyn std::any::Any\n   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `std::fmt::Debug` is not implemented for `(dyn plugin::traits::Plugin + 'static)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `std::fmt::Debug`:\n  dyn std::any::Any + std::marker::Send + Sync\n  dyn std::any::Any + std::marker::Send\n  dyn std::any::Any","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`(dyn plugin::traits::Plugin + 'static)` doesn't implement `std::fmt::Debug`","spans":[{"byte_end":409,"byte_start":386,"column_end":28,"column_start":5,"expansion":{"def_site_span":{"byte_end":21917,"byte_start":21902,"column_end":20,"column_start":5,"expansion":null,"file_name":"C:\\ProgramData\\chocolatey\\lib\\rust\\tools\\lib/rustlib/src/rust\\library\\core\\src\\fmt\\mod.rs","is_primary":false,"label":null,"line_end":650,"line_start":650,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":5,"text":"    pub macro Debug($item:item) {"}]},"macro_decl_name":"#[derive(Debug)]","span":{"byte_end":337,"byte_start":332,"column_end":15,"column_start":10,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":false,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Debug)]"}]}},"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":"`(dyn plugin::traits::Plugin + 'static)` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`","line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":5,"text":"    plugin: Arc<dyn Plugin>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `InvalidArgument` found for enum `core::error::Error` in the current scope\n  --> src\\core\\actions\\flow\\delay.rs:65:38\n   |\n65 |                 Err(_) => Err(Error::InvalidArgument(format!(\n   |                                      ^^^^^^^^^^^^^^^ variant or associated item not found in `Error`\n   |\n  ::: src\\core\\error.rs:4:1\n   |\n4  | pub enum Error {\n   | -------------- variant or associated item `InvalidArgument` not found for this enum\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `InvalidArgument` found for enum `core::error::Error` in the current scope","spans":[{"byte_end":1739,"byte_start":1724,"column_end":53,"column_start":38,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":"variant or associated item not found in `Error`","line_end":65,"line_start":65,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":53,"highlight_start":38,"text":"                Err(_) => Err(Error::InvalidArgument(format!("}]},{"byte_end":64,"byte_start":50,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\error.rs","is_primary":false,"label":"variant or associated item `InvalidArgument` not found for this enum","line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"pub enum Error {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `InvalidConfiguration` found for enum `core::error::Error` in the current scope\n  --> src\\core\\actions\\flow\\delay.rs:85:24\n   |\n85 |             Err(Error::InvalidConfiguration(\n   |                        ^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `Error`\n   |\n  ::: src\\core\\error.rs:4:1\n   |\n4  | pub enum Error {\n   | -------------- variant or associated item `InvalidConfiguration` not found for this enum\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `InvalidConfiguration` found for enum `core::error::Error` in the current scope","spans":[{"byte_end":2424,"byte_start":2404,"column_end":44,"column_start":24,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":"variant or associated item not found in `Error`","line_end":85,"line_start":85,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":24,"text":"            Err(Error::InvalidConfiguration("}]},{"byte_end":64,"byte_start":50,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\error.rs","is_primary":false,"label":"variant or associated item `InvalidConfiguration` not found for this enum","line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"pub enum Error {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `InvalidArgument` found for enum `core::error::Error` in the current scope\n   --> src\\core\\actions\\flow\\delay.rs:183:27\n    |\n183 |         if let Err(Error::InvalidArgument(_)) = result {\n    |                           ^^^^^^^^^^^^^^^ variant or associated item not found in `Error`\n    |\n   ::: src\\core\\error.rs:4:1\n    |\n4   | pub enum Error {\n    | -------------- variant or associated item `InvalidArgument` not found for this enum\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `InvalidArgument` found for enum `core::error::Error` in the current scope","spans":[{"byte_end":5594,"byte_start":5579,"column_end":42,"column_start":27,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":"variant or associated item not found in `Error`","line_end":183,"line_start":183,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":27,"text":"        if let Err(Error::InvalidArgument(_)) = result {"}]},{"byte_end":64,"byte_start":50,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\error.rs","is_primary":false,"label":"variant or associated item `InvalidArgument` not found for this enum","line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"pub enum Error {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `&mocks::MockPlugin: plugin::traits::Plugin` is not satisfied\n   --> src\\testing\\mocks.rs:102:9\n    |\n102 |         Box::new(self.clone())\n    |         ^^^^^^^^^^^^^^^^^^^^^^ the trait `plugin::traits::Plugin` is not implemented for `&mocks::MockPlugin`\n    |\n    = help: the trait `plugin::traits::Plugin` is implemented for `mocks::MockPlugin`\n    = note: required for the cast from `std::boxed::Box<&mocks::MockPlugin>` to `std::boxed::Box<(dyn plugin::traits::Plugin + 'static)>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `plugin::traits::Plugin` is implemented for `mocks::MockPlugin`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for the cast from `std::boxed::Box<&mocks::MockPlugin>` to `std::boxed::Box<(dyn plugin::traits::Plugin + 'static)>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `&mocks::MockPlugin: plugin::traits::Plugin` is not satisfied","spans":[{"byte_end":2545,"byte_start":2523,"column_end":31,"column_start":9,"expansion":null,"file_name":"src\\testing\\mocks.rs","is_primary":true,"label":"the trait `plugin::traits::Plugin` is not implemented for `&mocks::MockPlugin`","line_end":102,"line_start":102,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        Box::new(self.clone())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no method named `unwrap` found for struct `Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>` in the current scope\n   --> src\\testing\\mocks.rs:252:38\n    |\n252 |         handler.handle_event(&event).unwrap();\n    |                                      ^^^^^^ method not found in `Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>`\n    |\n    = note: the full type name has been written to 'C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\eventghost-47e3ad40a296f222.long-type-16247864084571130563.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the full type name has been written to 'C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\target\\debug\\deps\\eventghost-47e3ad40a296f222.long-type-16247864084571130563.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `unwrap` found for struct `Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>` in the current scope","spans":[{"byte_end":6076,"byte_start":6070,"column_end":44,"column_start":38,"expansion":null,"file_name":"src\\testing\\mocks.rs","is_primary":true,"label":"method not found in `Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>`","line_end":252,"line_start":252,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":38,"text":"        handler.handle_event(&event).unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0053]: method `initialize` has an incompatible type for trait\n   --> src\\core\\plugin\\traits.rs:201:5\n    |\n201 |     #[async_trait]\n    |     ^^^^^^^^^^^^^^ expected `PluginError`, found `core::error::Error`\n    |\nnote: type in trait\n   --> src\\core\\plugin\\traits.rs:86:1\n    |\n86  | #[async_trait]\n    | ^^^^^^^^^^^^^^\n    = note: expected signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n               found signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`\n    = note: this error originates in the attribute macro `async_trait` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: change the output type to match the trait\n    |\n201 |     std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"type in trait","rendered":null,"spans":[{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}]},{"children":[],"code":null,"level":"note","message":"expected signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"change the output type to match the trait","rendered":null,"spans":[{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":201,"line_start":201,"suggested_replacement":"std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}],"code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","message":"method `initialize` has an incompatible type for trait","spans":[{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":"expected `PluginError`, found `core::error::Error`","line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0053]: method `start` has an incompatible type for trait\n   --> src\\core\\plugin\\traits.rs:201:5\n    |\n201 |     #[async_trait]\n    |     ^^^^^^^^^^^^^^ expected `PluginError`, found `core::error::Error`\n    |\nnote: type in trait\n   --> src\\core\\plugin\\traits.rs:86:1\n    |\n86  | #[async_trait]\n    | ^^^^^^^^^^^^^^\n    = note: expected signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n               found signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`\n    = note: this error originates in the attribute macro `async_trait` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: change the output type to match the trait\n    |\n201 |     std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"type in trait","rendered":null,"spans":[{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}]},{"children":[],"code":null,"level":"note","message":"expected signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"change the output type to match the trait","rendered":null,"spans":[{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":201,"line_start":201,"suggested_replacement":"std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}],"code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","message":"method `start` has an incompatible type for trait","spans":[{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":"expected `PluginError`, found `core::error::Error`","line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0053]: method `stop` has an incompatible type for trait\n   --> src\\core\\plugin\\traits.rs:201:5\n    |\n201 |     #[async_trait]\n    |     ^^^^^^^^^^^^^^ expected `PluginError`, found `core::error::Error`\n    |\nnote: type in trait\n   --> src\\core\\plugin\\traits.rs:86:1\n    |\n86  | #[async_trait]\n    | ^^^^^^^^^^^^^^\n    = note: expected signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n               found signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`\n    = note: this error originates in the attribute macro `async_trait` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: change the output type to match the trait\n    |\n201 |     std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"type in trait","rendered":null,"spans":[{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}]},{"children":[],"code":null,"level":"note","message":"expected signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 mut plugin::traits::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"change the output type to match the trait","rendered":null,"spans":[{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":201,"line_start":201,"suggested_replacement":"std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}],"code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","message":"method `stop` has an incompatible type for trait","spans":[{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":"expected `PluginError`, found `core::error::Error`","line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0053]: method `handle_event` has an incompatible type for trait\n   --> src\\core\\plugin\\traits.rs:201:5\n    |\n201 |     #[async_trait]\n    |     ^^^^^^^^^^^^^^ expected `PluginError`, found `core::error::Error`\n    |\nnote: type in trait\n   --> src\\core\\plugin\\traits.rs:86:1\n    |\n86  | #[async_trait]\n    | ^^^^^^^^^^^^^^\n    = note: expected signature `fn(&'life0 mut plugin::traits::tests::TestPlugin, &'life1 _) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n               found signature `fn(&'life0 mut plugin::traits::tests::TestPlugin, &'life1 _) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`\n    = note: this error originates in the attribute macro `async_trait` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: change the output type to match the trait\n    |\n201 |     std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"type in trait","rendered":null,"spans":[{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}]},{"children":[],"code":null,"level":"note","message":"expected signature `fn(&'life0 mut plugin::traits::tests::TestPlugin, &'life1 _) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 mut plugin::traits::tests::TestPlugin, &'life1 _) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"change the output type to match the trait","rendered":null,"spans":[{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":201,"line_start":201,"suggested_replacement":"std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}],"code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","message":"method `handle_event` has an incompatible type for trait","spans":[{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":"expected `PluginError`, found `core::error::Error`","line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0053]: method `update_config` has an incompatible type for trait\n   --> src\\core\\plugin\\traits.rs:201:5\n    |\n201 |     #[async_trait]\n    |     ^^^^^^^^^^^^^^ expected `PluginError`, found `core::error::Error`\n    |\nnote: type in trait\n   --> src\\core\\plugin\\traits.rs:86:1\n    |\n86  | #[async_trait]\n    | ^^^^^^^^^^^^^^\n    = note: expected signature `fn(&'life0 mut plugin::traits::tests::TestPlugin, core::config::Config) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n               found signature `fn(&'life0 mut plugin::traits::tests::TestPlugin, core::config::Config) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`\n    = note: this error originates in the attribute macro `async_trait` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: change the output type to match the trait\n    |\n201 |     std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"type in trait","rendered":null,"spans":[{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}]},{"children":[],"code":null,"level":"note","message":"expected signature `fn(&'life0 mut plugin::traits::tests::TestPlugin, core::config::Config) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 mut plugin::traits::tests::TestPlugin, core::config::Config) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"change the output type to match the trait","rendered":null,"spans":[{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":201,"line_start":201,"suggested_replacement":"std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}],"code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","message":"method `update_config` has an incompatible type for trait","spans":[{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":5393,"byte_start":5379,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":"expected `PluginError`, found `core::error::Error`","line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0053]: method `initialize` has an incompatible type for trait\n   --> src\\core\\action.rs:260:1\n    |\n260 | #[async_trait]\n    | ^^^^^^^^^^^^^^ expected `PluginError`, found `core::error::Error`\n    |\nnote: type in trait\n   --> src\\core\\plugin\\traits.rs:86:1\n    |\n86  | #[async_trait]\n    | ^^^^^^^^^^^^^^\n    = note: expected signature `fn(&'life0 mut DummyPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n               found signature `fn(&'life0 mut DummyPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`\n    = note: this error originates in the attribute macro `async_trait` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: change the output type to match the trait\n    |\n260 | std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"type in trait","rendered":null,"spans":[{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}]},{"children":[],"code":null,"level":"note","message":"expected signature `fn(&'life0 mut DummyPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 mut DummyPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"change the output type to match the trait","rendered":null,"spans":[{"byte_end":7295,"byte_start":7281,"column_end":15,"column_start":1,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":7295,"byte_start":7281,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":false,"label":null,"line_end":260,"line_start":260,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}},"file_name":"src\\core\\action.rs","is_primary":true,"label":null,"line_end":260,"line_start":260,"suggested_replacement":"std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}]}],"code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","message":"method `initialize` has an incompatible type for trait","spans":[{"byte_end":7295,"byte_start":7281,"column_end":15,"column_start":1,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":7295,"byte_start":7281,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":false,"label":null,"line_end":260,"line_start":260,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}},"file_name":"src\\core\\action.rs","is_primary":true,"label":"expected `PluginError`, found `core::error::Error`","line_end":260,"line_start":260,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0046]: not all trait items implemented, missing: `get_info`, `get_capabilities`, `get_state`, `start`, `stop`, `handle_event`, `get_config`, `update_config`, `as_any`, `clone_box`\n   --> src\\core\\action.rs:261:1\n    |\n261 | impl Plugin for DummyPlugin {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `get_info`, `get_capabilities`, `get_state`, `start`, `stop`, `handle_event`, `get_config`, `update_config`, `as_any`, `clone_box` in implementation\n    |\n   ::: src\\core\\plugin\\traits.rs:89:5\n    |\n89  |     fn get_info(&self) -> PluginInfo;\n    |     --------------------------------- `get_info` from trait\n...\n92  |     fn get_capabilities(&self) -> Vec<PluginCapability>;\n    |     ---------------------------------------------------- `get_capabilities` from trait\n...\n95  |     fn get_state(&self) -> PluginState;\n    |     ----------------------------------- `get_state` from trait\n...\n101 |     async fn start(&mut self) -> Result<(), PluginError>;\n    |     ----------------------------------------------------- `start` from trait\n...\n104 |     async fn stop(&mut self) -> Result<(), PluginError>;\n    |     ---------------------------------------------------- `stop` from trait\n...\n107 |     async fn handle_event(&mut self, event: &dyn Event) -> Result<(), PluginError>;\n    |     ------------------------------------------------------------------------------- `handle_event` from trait\n...\n110 |     fn get_config(&self) -> Option<&Config>;\n    |     ---------------------------------------- `get_config` from trait\n...\n113 |     async fn update_config(&mut self, config: Config) -> Result<(), PluginError>;\n    |     ----------------------------------------------------------------------------- `update_config` from trait\n...\n116 |     fn as_any(&self) -> &dyn Any;\n    |     ----------------------------- `as_any` from trait\n...\n131 |     fn clone_box(&self) -> Box<dyn Plugin>;\n    |     --------------------------------------- `clone_box` from trait\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn get_info(&self) -> plugin::traits::PluginInfo { todo!() }`","rendered":null,"spans":[{"byte_end":7757,"byte_start":7757,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":null,"line_end":285,"line_start":285,"suggested_replacement":"fn get_info(&self) -> plugin::traits::PluginInfo { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"} "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn get_capabilities(&self) -> Vec<plugin::traits::PluginCapability> { todo!() }`","rendered":null,"spans":[{"byte_end":7757,"byte_start":7757,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":null,"line_end":285,"line_start":285,"suggested_replacement":"fn get_capabilities(&self) -> Vec<plugin::traits::PluginCapability> { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"} "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn get_state(&self) -> plugin::traits::PluginState { todo!() }`","rendered":null,"spans":[{"byte_end":7757,"byte_start":7757,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":null,"line_end":285,"line_start":285,"suggested_replacement":"fn get_state(&self) -> plugin::traits::PluginState { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"} "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn start(&'life0 mut self) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }`","rendered":null,"spans":[{"byte_end":7757,"byte_start":7757,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":null,"line_end":285,"line_start":285,"suggested_replacement":"fn start(&'life0 mut self) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"} "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn stop(&'life0 mut self) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }`","rendered":null,"spans":[{"byte_end":7757,"byte_start":7757,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":null,"line_end":285,"line_start":285,"suggested_replacement":"fn stop(&'life0 mut self) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"} "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn handle_event(&'life0 mut self, _: &'life1 (dyn core::event::Event + 'static)) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }`","rendered":null,"spans":[{"byte_end":7757,"byte_start":7757,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":null,"line_end":285,"line_start":285,"suggested_replacement":"fn handle_event(&'life0 mut self, _: &'life1 (dyn core::event::Event + 'static)) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"} "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn get_config(&self) -> std::option::Option<&core::config::Config> { todo!() }`","rendered":null,"spans":[{"byte_end":7757,"byte_start":7757,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":null,"line_end":285,"line_start":285,"suggested_replacement":"fn get_config(&self) -> std::option::Option<&core::config::Config> { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"} "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn update_config(&'life0 mut self, _: core::config::Config) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }`","rendered":null,"spans":[{"byte_end":7757,"byte_start":7757,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":null,"line_end":285,"line_start":285,"suggested_replacement":"fn update_config(&'life0 mut self, _: core::config::Config) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"} "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn as_any(&self) -> &(dyn std::any::Any + 'static) { todo!() }`","rendered":null,"spans":[{"byte_end":7757,"byte_start":7757,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":null,"line_end":285,"line_start":285,"suggested_replacement":"fn as_any(&self) -> &(dyn std::any::Any + 'static) { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"} "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn clone_box(&self) -> std::boxed::Box<(dyn plugin::traits::Plugin + 'static)> { todo!() }`","rendered":null,"spans":[{"byte_end":7757,"byte_start":7757,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":null,"line_end":285,"line_start":285,"suggested_replacement":"fn clone_box(&self) -> std::boxed::Box<(dyn plugin::traits::Plugin + 'static)> { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"} "}]}]}],"code":{"code":"E0046","explanation":"Items are missing in a trait implementation.\n\nErroneous code example:\n\n```compile_fail,E0046\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {}\n// error: not all trait items implemented, missing: `foo`\n```\n\nWhen trying to make some type implement a trait `Foo`, you must, at minimum,\nprovide implementations for all of `Foo`'s required methods (meaning the\nmethods that do not have default implementations), as well as any required\ntrait items like associated types or constants. Example:\n\n```\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn foo() {} // ok!\n}\n```\n"},"level":"error","message":"not all trait items implemented, missing: `get_info`, `get_capabilities`, `get_state`, `start`, `stop`, `handle_event`, `get_config`, `update_config`, `as_any`, `clone_box`","spans":[{"byte_end":7324,"byte_start":7297,"column_end":28,"column_start":1,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":"missing `get_info`, `get_capabilities`, `get_state`, `start`, `stop`, `handle_event`, `get_config`, `update_config`, `as_any`, `clone_box` in implementation","line_end":261,"line_start":261,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":1,"text":"impl Plugin for DummyPlugin {"}]},{"byte_end":2318,"byte_start":2285,"column_end":38,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`get_info` from trait","line_end":89,"line_start":89,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":5,"text":"    fn get_info(&self) -> PluginInfo;"}]},{"byte_end":2415,"byte_start":2363,"column_end":57,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`get_capabilities` from trait","line_end":92,"line_start":92,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":5,"text":"    fn get_capabilities(&self) -> Vec<PluginCapability>;"}]},{"byte_end":2496,"byte_start":2461,"column_end":40,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`get_state` from trait","line_end":95,"line_start":95,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":5,"text":"    fn get_state(&self) -> PluginState;"}]},{"byte_end":2688,"byte_start":2635,"column_end":58,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`start` from trait","line_end":101,"line_start":101,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":58,"highlight_start":5,"text":"    async fn start(&mut self) -> Result<(), PluginError>;"}]},{"byte_end":2777,"byte_start":2725,"column_end":57,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`stop` from trait","line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":5,"text":"    async fn stop(&mut self) -> Result<(), PluginError>;"}]},{"byte_end":2893,"byte_start":2814,"column_end":84,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`handle_event` from trait","line_end":107,"line_start":107,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":84,"highlight_start":5,"text":"    async fn handle_event(&mut self, event: &dyn Event) -> Result<(), PluginError>;"}]},{"byte_end":2979,"byte_start":2939,"column_end":45,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`get_config` from trait","line_end":110,"line_start":110,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":5,"text":"    fn get_config(&self) -> Option<&Config>;"}]},{"byte_end":3105,"byte_start":3028,"column_end":82,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`update_config` from trait","line_end":113,"line_start":113,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":82,"highlight_start":5,"text":"    async fn update_config(&mut self, config: Config) -> Result<(), PluginError>;"}]},{"byte_end":3195,"byte_start":3166,"column_end":34,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`as_any` from trait","line_end":116,"line_start":116,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":5,"text":"    fn as_any(&self) -> &dyn Any;"}]},{"byte_end":3544,"byte_start":3505,"column_end":44,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`clone_box` from trait","line_end":131,"line_start":131,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":5,"text":"    fn clone_box(&self) -> Box<dyn Plugin>;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0596]: cannot borrow `registry` as mutable, as it is not declared as mutable\n   --> src\\core\\plugin\\registry.rs:366:13\n    |\n366 |         let registry = PluginRegistry::new(temp_dir.path().to_path_buf()).unwrap();\n    |             ^^^^^^^^ not mutable\n...\n369 |         registry.load_all().await.unwrap();\n    |         -------- cannot borrow as mutable\n...\n376 |         registry.unload_all().await.unwrap();\n    |         -------- cannot borrow as mutable\n    |\nhelp: consider changing this to be mutable\n    |\n366 |         let mut registry = PluginRegistry::new(temp_dir.path().to_path_buf()).unwrap();\n    |             +++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider changing this to be mutable","rendered":null,"spans":[{"byte_end":12981,"byte_start":12981,"column_end":13,"column_start":13,"expansion":null,"file_name":"src\\core\\plugin\\registry.rs","is_primary":true,"label":null,"line_end":366,"line_start":366,"suggested_replacement":"mut ","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":13,"highlight_start":13,"text":"        let registry = PluginRegistry::new(temp_dir.path().to_path_buf()).unwrap();"}]}]}],"code":{"code":"E0596","explanation":"This error occurs because you tried to mutably borrow a non-mutable variable.\n\nErroneous code example:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"},"level":"error","message":"cannot borrow `registry` as mutable, as it is not declared as mutable","spans":[{"byte_end":13117,"byte_start":13109,"column_end":17,"column_start":9,"expansion":null,"file_name":"src\\core\\plugin\\registry.rs","is_primary":false,"label":"cannot borrow as mutable","line_end":369,"line_start":369,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":9,"text":"        registry.load_all().await.unwrap();"}]},{"byte_end":12989,"byte_start":12981,"column_end":21,"column_start":13,"expansion":null,"file_name":"src\\core\\plugin\\registry.rs","is_primary":true,"label":"not mutable","line_end":366,"line_start":366,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":13,"text":"        let registry = PluginRegistry::new(temp_dir.path().to_path_buf()).unwrap();"}]},{"byte_end":13345,"byte_start":13337,"column_end":17,"column_start":9,"expansion":null,"file_name":"src\\core\\plugin\\registry.rs","is_primary":false,"label":"cannot borrow as mutable","line_end":376,"line_start":376,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":9,"text":"        registry.unload_all().await.unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `NotFound` found for enum `core::error::Error` in the current scope\n   --> src\\core\\action.rs:212:35\n    |\n212 |             .ok_or_else(|| Error::NotFound(format!(\"Action with ID {} not found\", action_id)))?;\n    |                                   ^^^^^^^^ variant or associated item not found in `Error`\n    |\n   ::: src\\core\\error.rs:4:1\n    |\n4   | pub enum Error {\n    | -------------- variant or associated item `NotFound` not found for this enum\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `NotFound` found for enum `core::error::Error` in the current scope","spans":[{"byte_end":5757,"byte_start":5749,"column_end":43,"column_start":35,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":"variant or associated item not found in `Error`","line_end":212,"line_start":212,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":35,"text":"            .ok_or_else(|| Error::NotFound(format!(\"Action with ID {} not found\", action_id)))?;"}]},{"byte_end":64,"byte_start":50,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\error.rs","is_primary":false,"label":"variant or associated item `NotFound` not found for this enum","line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"pub enum Error {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `InvalidOperation` found for enum `core::error::Error` in the current scope\n   --> src\\core\\action.rs:216:31\n    |\n216 |             return Err(Error::InvalidOperation(format!(\n    |                               ^^^^^^^^^^^^^^^^ variant or associated item not found in `Error`\n    |\n   ::: src\\core\\error.rs:4:1\n    |\n4   | pub enum Error {\n    | -------------- variant or associated item `InvalidOperation` not found for this enum\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `InvalidOperation` found for enum `core::error::Error` in the current scope","spans":[{"byte_end":5996,"byte_start":5980,"column_end":47,"column_start":31,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":true,"label":"variant or associated item not found in `Error`","line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":31,"text":"            return Err(Error::InvalidOperation(format!("}]},{"byte_end":64,"byte_start":50,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\error.rs","is_primary":false,"label":"variant or associated item `InvalidOperation` not found for this enum","line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"pub enum Error {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0053]: method `initialize` has an incompatible type for trait\n   --> src\\core\\actions\\flow\\delay.rs:103:5\n    |\n103 |     #[async_trait]\n    |     ^^^^^^^^^^^^^^ expected `PluginError`, found `core::error::Error`\n    |\nnote: type in trait\n   --> src\\core\\plugin\\traits.rs:86:1\n    |\n86  | #[async_trait]\n    | ^^^^^^^^^^^^^^\n    = note: expected signature `fn(&'life0 mut delay::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n               found signature `fn(&'life0 mut delay::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`\n    = note: this error originates in the attribute macro `async_trait` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: change the output type to match the trait\n    |\n103 |     std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"type in trait","rendered":null,"spans":[{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":2214,"byte_start":2200,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}},"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"#[async_trait]"}]}]},{"children":[],"code":null,"level":"note","message":"expected signature `fn(&'life0 mut delay::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>`\n   found signature `fn(&'life0 mut delay::tests::TestPlugin) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), core::error::Error>> + std::marker::Send + 'async_trait)>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"change the output type to match the trait","rendered":null,"spans":[{"byte_end":2738,"byte_start":2724,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":2738,"byte_start":2724,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":false,"label":null,"line_end":103,"line_start":103,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":103,"line_start":103,"suggested_replacement":"std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>>","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}],"code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","message":"method `initialize` has an incompatible type for trait","spans":[{"byte_end":2738,"byte_start":2724,"column_end":19,"column_start":5,"expansion":{"def_site_span":{"byte_end":10542,"byte_start":10470,"column_end":73,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\async-trait-0.1.85\\src\\lib.rs","is_primary":false,"label":null,"line_end":353,"line_start":353,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":1,"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[async_trait]","span":{"byte_end":2738,"byte_start":2724,"column_end":19,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":false,"label":null,"line_end":103,"line_start":103,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}},"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":"expected `PluginError`, found `core::error::Error`","line_end":103,"line_start":103,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    #[async_trait]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0046]: not all trait items implemented, missing: `get_info`, `get_capabilities`, `get_state`, `start`, `stop`, `handle_event`, `get_config`, `update_config`, `as_any`, `clone_box`\n   --> src\\core\\actions\\flow\\delay.rs:104:5\n    |\n104 |     impl Plugin for TestPlugin {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `get_info`, `get_capabilities`, `get_state`, `start`, `stop`, `handle_event`, `get_config`, `update_config`, `as_any`, `clone_box` in implementation\n    |\n   ::: src\\core\\plugin\\traits.rs:89:5\n    |\n89  |     fn get_info(&self) -> PluginInfo;\n    |     --------------------------------- `get_info` from trait\n...\n92  |     fn get_capabilities(&self) -> Vec<PluginCapability>;\n    |     ---------------------------------------------------- `get_capabilities` from trait\n...\n95  |     fn get_state(&self) -> PluginState;\n    |     ----------------------------------- `get_state` from trait\n...\n101 |     async fn start(&mut self) -> Result<(), PluginError>;\n    |     ----------------------------------------------------- `start` from trait\n...\n104 |     async fn stop(&mut self) -> Result<(), PluginError>;\n    |     ---------------------------------------------------- `stop` from trait\n...\n107 |     async fn handle_event(&mut self, event: &dyn Event) -> Result<(), PluginError>;\n    |     ------------------------------------------------------------------------------- `handle_event` from trait\n...\n110 |     fn get_config(&self) -> Option<&Config>;\n    |     ---------------------------------------- `get_config` from trait\n...\n113 |     async fn update_config(&mut self, config: Config) -> Result<(), PluginError>;\n    |     ----------------------------------------------------------------------------- `update_config` from trait\n...\n116 |     fn as_any(&self) -> &dyn Any;\n    |     ----------------------------- `as_any` from trait\n...\n131 |     fn clone_box(&self) -> Box<dyn Plugin>;\n    |     --------------------------------------- `clone_box` from trait\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn get_info(&self) -> plugin::traits::PluginInfo { todo!() }`","rendered":null,"spans":[{"byte_end":3136,"byte_start":3136,"column_end":5,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":"    fn get_info(&self) -> plugin::traits::PluginInfo { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    }"}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn get_capabilities(&self) -> Vec<plugin::traits::PluginCapability> { todo!() }`","rendered":null,"spans":[{"byte_end":3136,"byte_start":3136,"column_end":5,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":"    fn get_capabilities(&self) -> Vec<plugin::traits::PluginCapability> { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    }"}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn get_state(&self) -> plugin::traits::PluginState { todo!() }`","rendered":null,"spans":[{"byte_end":3136,"byte_start":3136,"column_end":5,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":"    fn get_state(&self) -> plugin::traits::PluginState { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    }"}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn start(&'life0 mut self) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }`","rendered":null,"spans":[{"byte_end":3136,"byte_start":3136,"column_end":5,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":"    fn start(&'life0 mut self) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    }"}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn stop(&'life0 mut self) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }`","rendered":null,"spans":[{"byte_end":3136,"byte_start":3136,"column_end":5,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":"    fn stop(&'life0 mut self) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    }"}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn handle_event(&'life0 mut self, _: &'life1 (dyn core::event::Event + 'static)) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }`","rendered":null,"spans":[{"byte_end":3136,"byte_start":3136,"column_end":5,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":"    fn handle_event(&'life0 mut self, _: &'life1 (dyn core::event::Event + 'static)) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    }"}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn get_config(&self) -> std::option::Option<&core::config::Config> { todo!() }`","rendered":null,"spans":[{"byte_end":3136,"byte_start":3136,"column_end":5,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":"    fn get_config(&self) -> std::option::Option<&core::config::Config> { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    }"}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn update_config(&'life0 mut self, _: core::config::Config) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }`","rendered":null,"spans":[{"byte_end":3136,"byte_start":3136,"column_end":5,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":"    fn update_config(&'life0 mut self, _: core::config::Config) -> std::pin::Pin<std::boxed::Box<(dyn futures::Future<Output = std::result::Result<(), PluginError>> + std::marker::Send + 'async_trait)>> { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    }"}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn as_any(&self) -> &(dyn std::any::Any + 'static) { todo!() }`","rendered":null,"spans":[{"byte_end":3136,"byte_start":3136,"column_end":5,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":"    fn as_any(&self) -> &(dyn std::any::Any + 'static) { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    }"}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn clone_box(&self) -> std::boxed::Box<(dyn plugin::traits::Plugin + 'static)> { todo!() }`","rendered":null,"spans":[{"byte_end":3136,"byte_start":3136,"column_end":5,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":"    fn clone_box(&self) -> std::boxed::Box<(dyn plugin::traits::Plugin + 'static)> { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    }"}]}]}],"code":{"code":"E0046","explanation":"Items are missing in a trait implementation.\n\nErroneous code example:\n\n```compile_fail,E0046\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {}\n// error: not all trait items implemented, missing: `foo`\n```\n\nWhen trying to make some type implement a trait `Foo`, you must, at minimum,\nprovide implementations for all of `Foo`'s required methods (meaning the\nmethods that do not have default implementations), as well as any required\ntrait items like associated types or constants. Example:\n\n```\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn foo() {} // ok!\n}\n```\n"},"level":"error","message":"not all trait items implemented, missing: `get_info`, `get_capabilities`, `get_state`, `start`, `stop`, `handle_event`, `get_config`, `update_config`, `as_any`, `clone_box`","spans":[{"byte_end":2770,"byte_start":2744,"column_end":31,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":"missing `get_info`, `get_capabilities`, `get_state`, `start`, `stop`, `handle_event`, `get_config`, `update_config`, `as_any`, `clone_box` in implementation","line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":5,"text":"    impl Plugin for TestPlugin {"}]},{"byte_end":2318,"byte_start":2285,"column_end":38,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`get_info` from trait","line_end":89,"line_start":89,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":5,"text":"    fn get_info(&self) -> PluginInfo;"}]},{"byte_end":2415,"byte_start":2363,"column_end":57,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`get_capabilities` from trait","line_end":92,"line_start":92,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":5,"text":"    fn get_capabilities(&self) -> Vec<PluginCapability>;"}]},{"byte_end":2496,"byte_start":2461,"column_end":40,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`get_state` from trait","line_end":95,"line_start":95,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":5,"text":"    fn get_state(&self) -> PluginState;"}]},{"byte_end":2688,"byte_start":2635,"column_end":58,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`start` from trait","line_end":101,"line_start":101,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":58,"highlight_start":5,"text":"    async fn start(&mut self) -> Result<(), PluginError>;"}]},{"byte_end":2777,"byte_start":2725,"column_end":57,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`stop` from trait","line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":5,"text":"    async fn stop(&mut self) -> Result<(), PluginError>;"}]},{"byte_end":2893,"byte_start":2814,"column_end":84,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`handle_event` from trait","line_end":107,"line_start":107,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":84,"highlight_start":5,"text":"    async fn handle_event(&mut self, event: &dyn Event) -> Result<(), PluginError>;"}]},{"byte_end":2979,"byte_start":2939,"column_end":45,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`get_config` from trait","line_end":110,"line_start":110,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":5,"text":"    fn get_config(&self) -> Option<&Config>;"}]},{"byte_end":3105,"byte_start":3028,"column_end":82,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`update_config` from trait","line_end":113,"line_start":113,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":82,"highlight_start":5,"text":"    async fn update_config(&mut self, config: Config) -> Result<(), PluginError>;"}]},{"byte_end":3195,"byte_start":3166,"column_end":34,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`as_any` from trait","line_end":116,"line_start":116,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":5,"text":"    fn as_any(&self) -> &dyn Any;"}]},{"byte_end":3544,"byte_start":3505,"column_end":44,"column_start":5,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":false,"label":"`clone_box` from trait","line_end":131,"line_start":131,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":5,"text":"    fn clone_box(&self) -> Box<dyn Plugin>;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0046]: not all trait items implemented, missing: `clone_event`\n   --> src\\core\\actions\\flow\\delay.rs:118:5\n    |\n118 |     impl Event for TestEvent {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ missing `clone_event` in implementation\n    |\n   ::: src\\core\\event.rs:51:5\n    |\n51  |     fn clone_event(&self) -> Box<dyn Event + Send + Sync>;\n    |     ------------------------------------------------------ `clone_event` from trait\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn clone_event(&self) -> std::boxed::Box<(dyn core::event::Event + std::marker::Send + Sync + 'static)> { todo!() }`","rendered":null,"spans":[{"byte_end":3800,"byte_start":3800,"column_end":5,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":null,"line_end":130,"line_start":130,"suggested_replacement":"    fn clone_event(&self) -> std::boxed::Box<(dyn core::event::Event + std::marker::Send + Sync + 'static)> { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":5,"highlight_start":5,"text":"    }"}]}]}],"code":{"code":"E0046","explanation":"Items are missing in a trait implementation.\n\nErroneous code example:\n\n```compile_fail,E0046\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {}\n// error: not all trait items implemented, missing: `foo`\n```\n\nWhen trying to make some type implement a trait `Foo`, you must, at minimum,\nprovide implementations for all of `Foo`'s required methods (meaning the\nmethods that do not have default implementations), as well as any required\ntrait items like associated types or constants. Example:\n\n```\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn foo() {} // ok!\n}\n```\n"},"level":"error","message":"not all trait items implemented, missing: `clone_event`","spans":[{"byte_end":3256,"byte_start":3232,"column_end":29,"column_start":5,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":"missing `clone_event` in implementation","line_end":118,"line_start":118,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"    impl Event for TestEvent {"}]},{"byte_end":1415,"byte_start":1361,"column_end":59,"column_start":5,"expansion":null,"file_name":"src\\core\\event.rs","is_primary":false,"label":"`clone_event` from trait","line_end":51,"line_start":51,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":5,"text":"    fn clone_event(&self) -> Box<dyn Event + Send + Sync>;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0507]: cannot move out of `self.state` which is behind a shared reference\n   --> src\\core\\plugin\\traits.rs:212:13\n    |\n212 |             self.state\n    |             ^^^^^^^^^^ move occurs because `self.state` has type `plugin::traits::PluginState`, which does not implement the `Copy` trait\n    |\nhelp: consider cloning the value if the performance cost is acceptable\n    |\n212 |             self.state.clone()\n    |                       ++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider cloning the value if the performance cost is acceptable","rendered":null,"spans":[{"byte_end":5681,"byte_start":5681,"column_end":23,"column_start":23,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":212,"line_start":212,"suggested_replacement":".clone()","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":23,"highlight_start":23,"text":"            self.state"}]}]}],"code":{"code":"E0507","explanation":"A borrowed value was moved out.\n\nErroneous code example:\n\n```compile_fail,E0507\nuse std::cell::RefCell;\n\nstruct TheDarkKnight;\n\nimpl TheDarkKnight {\n    fn nothing_is_true(self) {}\n}\n\nfn main() {\n    let x = RefCell::new(TheDarkKnight);\n\n    x.borrow().nothing_is_true(); // error: cannot move out of borrowed content\n}\n```\n\nHere, the `nothing_is_true` method takes the ownership of `self`. However,\n`self` cannot be moved because `.borrow()` only provides an `&TheDarkKnight`,\nwhich is a borrow of the content owned by the `RefCell`. To fix this error,\nyou have three choices:\n\n* Try to avoid moving the variable.\n* Somehow reclaim the ownership.\n* Implement the `Copy` trait on the type.\n\nThis can also happen when using a type implementing `Fn` or `FnMut`, as neither\nallows moving out of them (they usually represent closures which can be called\nmore than once). Much of the text following applies equally well to non-`FnOnce`\nclosure bodies.\n\nExamples:\n\n```\nuse std::cell::RefCell;\n\nstruct TheDarkKnight;\n\nimpl TheDarkKnight {\n    fn nothing_is_true(&self) {} // First case, we don't take ownership\n}\n\nfn main() {\n    let x = RefCell::new(TheDarkKnight);\n\n    x.borrow().nothing_is_true(); // ok!\n}\n```\n\nOr:\n\n```\nuse std::cell::RefCell;\n\nstruct TheDarkKnight;\n\nimpl TheDarkKnight {\n    fn nothing_is_true(self) {}\n}\n\nfn main() {\n    let x = RefCell::new(TheDarkKnight);\n    let x = x.into_inner(); // we get back ownership\n\n    x.nothing_is_true(); // ok!\n}\n```\n\nOr:\n\n```\nuse std::cell::RefCell;\n\n#[derive(Clone, Copy)] // we implement the Copy trait\nstruct TheDarkKnight;\n\nimpl TheDarkKnight {\n    fn nothing_is_true(self) {}\n}\n\nfn main() {\n    let x = RefCell::new(TheDarkKnight);\n\n    x.borrow().nothing_is_true(); // ok!\n}\n```\n\nMoving a member out of a mutably borrowed struct will also cause E0507 error:\n\n```compile_fail,E0507\nstruct TheDarkKnight;\n\nimpl TheDarkKnight {\n    fn nothing_is_true(self) {}\n}\n\nstruct Batcave {\n    knight: TheDarkKnight\n}\n\nfn main() {\n    let mut cave = Batcave {\n        knight: TheDarkKnight\n    };\n    let borrowed = &mut cave;\n\n    borrowed.knight.nothing_is_true(); // E0507\n}\n```\n\nIt is fine only if you put something back. `mem::replace` can be used for that:\n\n```\n# struct TheDarkKnight;\n# impl TheDarkKnight { fn nothing_is_true(self) {} }\n# struct Batcave { knight: TheDarkKnight }\nuse std::mem;\n\nlet mut cave = Batcave {\n    knight: TheDarkKnight\n};\nlet borrowed = &mut cave;\n\nmem::replace(&mut borrowed.knight, TheDarkKnight).nothing_is_true(); // ok!\n```\n\nFor more information on Rust's ownership system, take a look at the\n[References & Borrowing][references-and-borrowing] section of the Book.\n\n[references-and-borrowing]: https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html\n"},"level":"error","message":"cannot move out of `self.state` which is behind a shared reference","spans":[{"byte_end":5681,"byte_start":5671,"column_end":23,"column_start":13,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":"move occurs because `self.state` has type `plugin::traits::PluginState`, which does not implement the `Copy` trait","line_end":212,"line_start":212,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":13,"text":"            self.state"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src\\core\\plugin\\registry.rs:387:39\n    |\n387 |         let id = registry.load_plugin(plugin_path.clone()).await.unwrap();\n    |                           ----------- ^^^^^^^^^^^^^^^^^^^ expected `&Path`, found `PathBuf`\n    |                           |\n    |                           arguments to this method are incorrect\n    |\nnote: method defined here\n   --> src\\core\\plugin\\registry.rs:136:18\n    |\n136 |     pub async fn load_plugin(&self, path: &Path) -> Result<Uuid, RegistryError> {\n    |                  ^^^^^^^^^^^        -----------\nhelp: consider borrowing here\n    |\n387 |         let id = registry.load_plugin(&plugin_path.clone()).await.unwrap();\n    |                                       +\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":4653,"byte_start":4642,"column_end":48,"column_start":37,"expansion":null,"file_name":"src\\core\\plugin\\registry.rs","is_primary":false,"label":"","line_end":136,"line_start":136,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":37,"text":"    pub async fn load_plugin(&self, path: &Path) -> Result<Uuid, RegistryError> {"}]},{"byte_end":4634,"byte_start":4623,"column_end":29,"column_start":18,"expansion":null,"file_name":"src\\core\\plugin\\registry.rs","is_primary":true,"label":null,"line_end":136,"line_start":136,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":18,"text":"    pub async fn load_plugin(&self, path: &Path) -> Result<Uuid, RegistryError> {"}]}]},{"children":[],"code":null,"level":"help","message":"consider borrowing here","rendered":null,"spans":[{"byte_end":13793,"byte_start":13793,"column_end":39,"column_start":39,"expansion":null,"file_name":"src\\core\\plugin\\registry.rs","is_primary":true,"label":null,"line_end":387,"line_start":387,"suggested_replacement":"&","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":39,"highlight_start":39,"text":"        let id = registry.load_plugin(plugin_path.clone()).await.unwrap();"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":13812,"byte_start":13793,"column_end":58,"column_start":39,"expansion":null,"file_name":"src\\core\\plugin\\registry.rs","is_primary":true,"label":"expected `&Path`, found `PathBuf`","line_end":387,"line_start":387,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":58,"highlight_start":39,"text":"        let id = registry.load_plugin(plugin_path.clone()).await.unwrap();"}]},{"byte_end":13792,"byte_start":13781,"column_end":38,"column_start":27,"expansion":null,"file_name":"src\\core\\plugin\\registry.rs","is_primary":false,"label":"arguments to this method are incorrect","line_end":387,"line_start":387,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":27,"text":"        let id = registry.load_plugin(plugin_path.clone()).await.unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `dyn std::any::Any + std::marker::Send + Sync: Clone` is not satisfied\n  --> src\\core\\action.rs:15:5\n   |\n11 | #[derive(Debug, Clone)]\n   |                 ----- in this derive macro expansion\n...\n15 |     pub data: Option<Box<dyn Any + Send + Sync>>,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `dyn std::any::Any + std::marker::Send + Sync`\n   |\n   = note: required for `std::boxed::Box<dyn std::any::Any + std::marker::Send + Sync>` to implement `Clone`\n   = note: 1 redundant requirement hidden\n   = note: required for `std::option::Option<std::boxed::Box<dyn std::any::Any + std::marker::Send + Sync>>` to implement `Clone`\n   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"required for `std::boxed::Box<dyn std::any::Any + std::marker::Send + Sync>` to implement `Clone`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `std::option::Option<std::boxed::Box<dyn std::any::Any + std::marker::Send + Sync>>` to implement `Clone`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `dyn std::any::Any + std::marker::Send + Sync: Clone` is not satisfied","spans":[{"byte_end":425,"byte_start":381,"column_end":49,"column_start":5,"expansion":{"def_site_span":{"byte_end":5973,"byte_start":5958,"column_end":16,"column_start":1,"expansion":null,"file_name":"C:\\ProgramData\\chocolatey\\lib\\rust\\tools\\lib/rustlib/src/rust\\library\\core\\src\\clone.rs","is_primary":false,"label":null,"line_end":183,"line_start":183,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":1,"text":"pub macro Clone($item:item) {"}]},"macro_decl_name":"#[derive(Clone)]","span":{"byte_end":288,"byte_start":283,"column_end":22,"column_start":17,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":false,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"src\\core\\action.rs","is_primary":true,"label":"the trait `Clone` is not implemented for `dyn std::any::Any + std::marker::Send + Sync`","line_end":15,"line_start":15,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":5,"text":"    pub data: Option<Box<dyn Any + Send + Sync>>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: `(dyn plugin::traits::Plugin + 'static)` doesn't implement `std::fmt::Debug`\n   --> src\\core\\action.rs:120:5\n    |\n115 | #[derive(Debug)]\n    |          ----- in this derive macro expansion\n...\n120 |     pub plugin: Arc<dyn Plugin>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn plugin::traits::Plugin + 'static)` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n    = help: the trait `std::fmt::Debug` is not implemented for `(dyn plugin::traits::Plugin + 'static)`\n    = help: the following other types implement trait `std::fmt::Debug`:\n              dyn std::any::Any + std::marker::Send + Sync\n              dyn std::any::Any + std::marker::Send\n              dyn std::any::Any\n              dyn tracing::Value\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `std::fmt::Debug` is not implemented for `(dyn plugin::traits::Plugin + 'static)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `std::fmt::Debug`:\n  dyn std::any::Any + std::marker::Send + Sync\n  dyn std::any::Any + std::marker::Send\n  dyn std::any::Any\n  dyn tracing::Value","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`(dyn plugin::traits::Plugin + 'static)` doesn't implement `std::fmt::Debug`","spans":[{"byte_end":3172,"byte_start":3145,"column_end":32,"column_start":5,"expansion":{"def_site_span":{"byte_end":21917,"byte_start":21902,"column_end":20,"column_start":5,"expansion":null,"file_name":"C:\\ProgramData\\chocolatey\\lib\\rust\\tools\\lib/rustlib/src/rust\\library\\core\\src\\fmt\\mod.rs","is_primary":false,"label":null,"line_end":650,"line_start":650,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":5,"text":"    pub macro Debug($item:item) {"}]},"macro_decl_name":"#[derive(Debug)]","span":{"byte_end":3014,"byte_start":3009,"column_end":15,"column_start":10,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":false,"label":null,"line_end":115,"line_start":115,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Debug)]"}]}},"file_name":"src\\core\\action.rs","is_primary":true,"label":"`(dyn plugin::traits::Plugin + 'static)` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`","line_end":120,"line_start":120,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":5,"text":"    pub plugin: Arc<dyn Plugin>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `core::action::ActionGroup: std::default::Default` is not satisfied\n   --> src\\core\\action.rs:190:5\n    |\n188 | #[derive(Default)]\n    |          ------- in this derive macro expansion\n189 | pub struct ActionManager {\n190 |     root_group: ActionGroup,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `core::action::ActionGroup`\n    |\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `core::action::ActionGroup: std::default::Default` is not satisfied","spans":[{"byte_end":5141,"byte_start":5118,"column_end":28,"column_start":5,"expansion":{"def_site_span":{"byte_end":3645,"byte_start":3628,"column_end":18,"column_start":1,"expansion":null,"file_name":"C:\\ProgramData\\chocolatey\\lib\\rust\\tools\\lib/rustlib/src/rust\\library\\core\\src\\default.rs","is_primary":false,"label":null,"line_end":146,"line_start":146,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":1,"text":"pub macro Default($item:item) {"}]},"macro_decl_name":"#[derive(Default)]","span":{"byte_end":5082,"byte_start":5075,"column_end":17,"column_start":10,"expansion":null,"file_name":"src\\core\\action.rs","is_primary":false,"label":null,"line_end":188,"line_start":188,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":10,"text":"#[derive(Default)]"}]}},"file_name":"src\\core\\action.rs","is_primary":true,"label":"the trait `std::default::Default` is not implemented for `core::action::ActionGroup`","line_end":190,"line_start":190,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":5,"text":"    root_group: ActionGroup,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: `(dyn plugin::traits::Plugin + 'static)` doesn't implement `std::fmt::Debug`\n  --> src\\core\\actions\\flow\\delay.rs:14:5\n   |\n11 | #[derive(Debug)]\n   |          ----- in this derive macro expansion\n...\n14 |     plugin: Arc<dyn Plugin>,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^ `(dyn plugin::traits::Plugin + 'static)` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n   |\n   = help: the trait `std::fmt::Debug` is not implemented for `(dyn plugin::traits::Plugin + 'static)`\n   = help: the following other types implement trait `std::fmt::Debug`:\n             dyn std::any::Any + std::marker::Send + Sync\n             dyn std::any::Any + std::marker::Send\n             dyn std::any::Any\n             dyn tracing::Value\n   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `std::fmt::Debug` is not implemented for `(dyn plugin::traits::Plugin + 'static)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `std::fmt::Debug`:\n  dyn std::any::Any + std::marker::Send + Sync\n  dyn std::any::Any + std::marker::Send\n  dyn std::any::Any\n  dyn tracing::Value","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`(dyn plugin::traits::Plugin + 'static)` doesn't implement `std::fmt::Debug`","spans":[{"byte_end":409,"byte_start":386,"column_end":28,"column_start":5,"expansion":{"def_site_span":{"byte_end":21917,"byte_start":21902,"column_end":20,"column_start":5,"expansion":null,"file_name":"C:\\ProgramData\\chocolatey\\lib\\rust\\tools\\lib/rustlib/src/rust\\library\\core\\src\\fmt\\mod.rs","is_primary":false,"label":null,"line_end":650,"line_start":650,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":5,"text":"    pub macro Debug($item:item) {"}]},"macro_decl_name":"#[derive(Debug)]","span":{"byte_end":337,"byte_start":332,"column_end":15,"column_start":10,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":false,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Debug)]"}]}},"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":"`(dyn plugin::traits::Plugin + 'static)` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`","line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":5,"text":"    plugin: Arc<dyn Plugin>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `InvalidArgument` found for enum `core::error::Error` in the current scope\n  --> src\\core\\actions\\flow\\delay.rs:65:38\n   |\n65 |                 Err(_) => Err(Error::InvalidArgument(format!(\n   |                                      ^^^^^^^^^^^^^^^ variant or associated item not found in `Error`\n   |\n  ::: src\\core\\error.rs:4:1\n   |\n4  | pub enum Error {\n   | -------------- variant or associated item `InvalidArgument` not found for this enum\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `InvalidArgument` found for enum `core::error::Error` in the current scope","spans":[{"byte_end":1739,"byte_start":1724,"column_end":53,"column_start":38,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":"variant or associated item not found in `Error`","line_end":65,"line_start":65,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":53,"highlight_start":38,"text":"                Err(_) => Err(Error::InvalidArgument(format!("}]},{"byte_end":64,"byte_start":50,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\error.rs","is_primary":false,"label":"variant or associated item `InvalidArgument` not found for this enum","line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"pub enum Error {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0507]: cannot move out of `self.state` which is behind a shared reference\n  --> src\\testing\\mocks.rs:52:9\n   |\n52 |         self.state\n   |         ^^^^^^^^^^ move occurs because `self.state` has type `plugin::traits::PluginState`, which does not implement the `Copy` trait\n   |\nhelp: consider cloning the value if the performance cost is acceptable\n   |\n52 |         self.state.clone()\n   |                   ++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider cloning the value if the performance cost is acceptable","rendered":null,"spans":[{"byte_end":1420,"byte_start":1420,"column_end":19,"column_start":19,"expansion":null,"file_name":"src\\testing\\mocks.rs","is_primary":true,"label":null,"line_end":52,"line_start":52,"suggested_replacement":".clone()","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":19,"highlight_start":19,"text":"        self.state"}]}]}],"code":{"code":"E0507","explanation":"A borrowed value was moved out.\n\nErroneous code example:\n\n```compile_fail,E0507\nuse std::cell::RefCell;\n\nstruct TheDarkKnight;\n\nimpl TheDarkKnight {\n    fn nothing_is_true(self) {}\n}\n\nfn main() {\n    let x = RefCell::new(TheDarkKnight);\n\n    x.borrow().nothing_is_true(); // error: cannot move out of borrowed content\n}\n```\n\nHere, the `nothing_is_true` method takes the ownership of `self`. However,\n`self` cannot be moved because `.borrow()` only provides an `&TheDarkKnight`,\nwhich is a borrow of the content owned by the `RefCell`. To fix this error,\nyou have three choices:\n\n* Try to avoid moving the variable.\n* Somehow reclaim the ownership.\n* Implement the `Copy` trait on the type.\n\nThis can also happen when using a type implementing `Fn` or `FnMut`, as neither\nallows moving out of them (they usually represent closures which can be called\nmore than once). Much of the text following applies equally well to non-`FnOnce`\nclosure bodies.\n\nExamples:\n\n```\nuse std::cell::RefCell;\n\nstruct TheDarkKnight;\n\nimpl TheDarkKnight {\n    fn nothing_is_true(&self) {} // First case, we don't take ownership\n}\n\nfn main() {\n    let x = RefCell::new(TheDarkKnight);\n\n    x.borrow().nothing_is_true(); // ok!\n}\n```\n\nOr:\n\n```\nuse std::cell::RefCell;\n\nstruct TheDarkKnight;\n\nimpl TheDarkKnight {\n    fn nothing_is_true(self) {}\n}\n\nfn main() {\n    let x = RefCell::new(TheDarkKnight);\n    let x = x.into_inner(); // we get back ownership\n\n    x.nothing_is_true(); // ok!\n}\n```\n\nOr:\n\n```\nuse std::cell::RefCell;\n\n#[derive(Clone, Copy)] // we implement the Copy trait\nstruct TheDarkKnight;\n\nimpl TheDarkKnight {\n    fn nothing_is_true(self) {}\n}\n\nfn main() {\n    let x = RefCell::new(TheDarkKnight);\n\n    x.borrow().nothing_is_true(); // ok!\n}\n```\n\nMoving a member out of a mutably borrowed struct will also cause E0507 error:\n\n```compile_fail,E0507\nstruct TheDarkKnight;\n\nimpl TheDarkKnight {\n    fn nothing_is_true(self) {}\n}\n\nstruct Batcave {\n    knight: TheDarkKnight\n}\n\nfn main() {\n    let mut cave = Batcave {\n        knight: TheDarkKnight\n    };\n    let borrowed = &mut cave;\n\n    borrowed.knight.nothing_is_true(); // E0507\n}\n```\n\nIt is fine only if you put something back. `mem::replace` can be used for that:\n\n```\n# struct TheDarkKnight;\n# impl TheDarkKnight { fn nothing_is_true(self) {} }\n# struct Batcave { knight: TheDarkKnight }\nuse std::mem;\n\nlet mut cave = Batcave {\n    knight: TheDarkKnight\n};\nlet borrowed = &mut cave;\n\nmem::replace(&mut borrowed.knight, TheDarkKnight).nothing_is_true(); // ok!\n```\n\nFor more information on Rust's ownership system, take a look at the\n[References & Borrowing][references-and-borrowing] section of the Book.\n\n[references-and-borrowing]: https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html\n"},"level":"error","message":"cannot move out of `self.state` which is behind a shared reference","spans":[{"byte_end":1420,"byte_start":1410,"column_end":19,"column_start":9,"expansion":null,"file_name":"src\\testing\\mocks.rs","is_primary":true,"label":"move occurs because `self.state` has type `plugin::traits::PluginState`, which does not implement the `Copy` trait","line_end":52,"line_start":52,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":9,"text":"        self.state"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `InvalidConfiguration` found for enum `core::error::Error` in the current scope\n  --> src\\core\\actions\\flow\\delay.rs:85:24\n   |\n85 |             Err(Error::InvalidConfiguration(\n   |                        ^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `Error`\n   |\n  ::: src\\core\\error.rs:4:1\n   |\n4  | pub enum Error {\n   | -------------- variant or associated item `InvalidConfiguration` not found for this enum\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `InvalidConfiguration` found for enum `core::error::Error` in the current scope","spans":[{"byte_end":2424,"byte_start":2404,"column_end":44,"column_start":24,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":"variant or associated item not found in `Error`","line_end":85,"line_start":85,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":24,"text":"            Err(Error::InvalidConfiguration("}]},{"byte_end":64,"byte_start":50,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\error.rs","is_primary":false,"label":"variant or associated item `InvalidConfiguration` not found for this enum","line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"pub enum Error {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `InvalidArgument` found for enum `core::error::Error` in the current scope\n   --> src\\core\\actions\\flow\\delay.rs:183:27\n    |\n183 |         if let Err(Error::InvalidArgument(_)) = result {\n    |                           ^^^^^^^^^^^^^^^ variant or associated item not found in `Error`\n    |\n   ::: src\\core\\error.rs:4:1\n    |\n4   | pub enum Error {\n    | -------------- variant or associated item `InvalidArgument` not found for this enum\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `InvalidArgument` found for enum `core::error::Error` in the current scope","spans":[{"byte_end":5594,"byte_start":5579,"column_end":42,"column_start":27,"expansion":null,"file_name":"src\\core\\actions\\flow\\delay.rs","is_primary":true,"label":"variant or associated item not found in `Error`","line_end":183,"line_start":183,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":27,"text":"        if let Err(Error::InvalidArgument(_)) = result {"}]},{"byte_end":64,"byte_start":50,"column_end":15,"column_start":1,"expansion":null,"file_name":"src\\core\\error.rs","is_primary":false,"label":"variant or associated item `InvalidArgument` not found for this enum","line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"pub enum Error {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0046, E0053, E0061, E0195, E0277, E0308, E0407, E0507, E0596...\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0046, E0053, E0061, E0195, E0277, E0308, E0407, E0507, E0596...","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["cdylib"],"crate_types":["cdylib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0046`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0046`.","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0596]: cannot borrow `registry` as mutable, as it is not declared as mutable\n   --> src\\core\\plugin\\registry.rs:366:13\n    |\n366 |         let registry = PluginRegistry::new(temp_dir.path().to_path_buf()).unwrap();\n    |             ^^^^^^^^ not mutable\n...\n369 |         registry.load_all().await.unwrap();\n    |         -------- cannot borrow as mutable\n...\n376 |         registry.unload_all().await.unwrap();\n    |         -------- cannot borrow as mutable\n    |\nhelp: consider changing this to be mutable\n    |\n366 |         let mut registry = PluginRegistry::new(temp_dir.path().to_path_buf()).unwrap();\n    |             +++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider changing this to be mutable","rendered":null,"spans":[{"byte_end":12981,"byte_start":12981,"column_end":13,"column_start":13,"expansion":null,"file_name":"src\\core\\plugin\\registry.rs","is_primary":true,"label":null,"line_end":366,"line_start":366,"suggested_replacement":"mut ","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":13,"highlight_start":13,"text":"        let registry = PluginRegistry::new(temp_dir.path().to_path_buf()).unwrap();"}]}]}],"code":{"code":"E0596","explanation":"This error occurs because you tried to mutably borrow a non-mutable variable.\n\nErroneous code example:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"},"level":"error","message":"cannot borrow `registry` as mutable, as it is not declared as mutable","spans":[{"byte_end":13117,"byte_start":13109,"column_end":17,"column_start":9,"expansion":null,"file_name":"src\\core\\plugin\\registry.rs","is_primary":false,"label":"cannot borrow as mutable","line_end":369,"line_start":369,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":9,"text":"        registry.load_all().await.unwrap();"}]},{"byte_end":12989,"byte_start":12981,"column_end":21,"column_start":13,"expansion":null,"file_name":"src\\core\\plugin\\registry.rs","is_primary":true,"label":"not mutable","line_end":366,"line_start":366,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":13,"text":"        let registry = PluginRegistry::new(temp_dir.path().to_path_buf()).unwrap();"}]},{"byte_end":13345,"byte_start":13337,"column_end":17,"column_start":9,"expansion":null,"file_name":"src\\core\\plugin\\registry.rs","is_primary":false,"label":"cannot borrow as mutable","line_end":376,"line_start":376,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":9,"text":"        registry.unload_all().await.unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0507]: cannot move out of `self.state` which is behind a shared reference\n   --> src\\core\\plugin\\traits.rs:212:13\n    |\n212 |             self.state\n    |             ^^^^^^^^^^ move occurs because `self.state` has type `plugin::traits::PluginState`, which does not implement the `Copy` trait\n    |\nhelp: consider cloning the value if the performance cost is acceptable\n    |\n212 |             self.state.clone()\n    |                       ++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider cloning the value if the performance cost is acceptable","rendered":null,"spans":[{"byte_end":5681,"byte_start":5681,"column_end":23,"column_start":23,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":null,"line_end":212,"line_start":212,"suggested_replacement":".clone()","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":23,"highlight_start":23,"text":"            self.state"}]}]}],"code":{"code":"E0507","explanation":"A borrowed value was moved out.\n\nErroneous code example:\n\n```compile_fail,E0507\nuse std::cell::RefCell;\n\nstruct TheDarkKnight;\n\nimpl TheDarkKnight {\n    fn nothing_is_true(self) {}\n}\n\nfn main() {\n    let x = RefCell::new(TheDarkKnight);\n\n    x.borrow().nothing_is_true(); // error: cannot move out of borrowed content\n}\n```\n\nHere, the `nothing_is_true` method takes the ownership of `self`. However,\n`self` cannot be moved because `.borrow()` only provides an `&TheDarkKnight`,\nwhich is a borrow of the content owned by the `RefCell`. To fix this error,\nyou have three choices:\n\n* Try to avoid moving the variable.\n* Somehow reclaim the ownership.\n* Implement the `Copy` trait on the type.\n\nThis can also happen when using a type implementing `Fn` or `FnMut`, as neither\nallows moving out of them (they usually represent closures which can be called\nmore than once). Much of the text following applies equally well to non-`FnOnce`\nclosure bodies.\n\nExamples:\n\n```\nuse std::cell::RefCell;\n\nstruct TheDarkKnight;\n\nimpl TheDarkKnight {\n    fn nothing_is_true(&self) {} // First case, we don't take ownership\n}\n\nfn main() {\n    let x = RefCell::new(TheDarkKnight);\n\n    x.borrow().nothing_is_true(); // ok!\n}\n```\n\nOr:\n\n```\nuse std::cell::RefCell;\n\nstruct TheDarkKnight;\n\nimpl TheDarkKnight {\n    fn nothing_is_true(self) {}\n}\n\nfn main() {\n    let x = RefCell::new(TheDarkKnight);\n    let x = x.into_inner(); // we get back ownership\n\n    x.nothing_is_true(); // ok!\n}\n```\n\nOr:\n\n```\nuse std::cell::RefCell;\n\n#[derive(Clone, Copy)] // we implement the Copy trait\nstruct TheDarkKnight;\n\nimpl TheDarkKnight {\n    fn nothing_is_true(self) {}\n}\n\nfn main() {\n    let x = RefCell::new(TheDarkKnight);\n\n    x.borrow().nothing_is_true(); // ok!\n}\n```\n\nMoving a member out of a mutably borrowed struct will also cause E0507 error:\n\n```compile_fail,E0507\nstruct TheDarkKnight;\n\nimpl TheDarkKnight {\n    fn nothing_is_true(self) {}\n}\n\nstruct Batcave {\n    knight: TheDarkKnight\n}\n\nfn main() {\n    let mut cave = Batcave {\n        knight: TheDarkKnight\n    };\n    let borrowed = &mut cave;\n\n    borrowed.knight.nothing_is_true(); // E0507\n}\n```\n\nIt is fine only if you put something back. `mem::replace` can be used for that:\n\n```\n# struct TheDarkKnight;\n# impl TheDarkKnight { fn nothing_is_true(self) {} }\n# struct Batcave { knight: TheDarkKnight }\nuse std::mem;\n\nlet mut cave = Batcave {\n    knight: TheDarkKnight\n};\nlet borrowed = &mut cave;\n\nmem::replace(&mut borrowed.knight, TheDarkKnight).nothing_is_true(); // ok!\n```\n\nFor more information on Rust's ownership system, take a look at the\n[References & Borrowing][references-and-borrowing] section of the Book.\n\n[references-and-borrowing]: https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html\n"},"level":"error","message":"cannot move out of `self.state` which is behind a shared reference","spans":[{"byte_end":5681,"byte_start":5671,"column_end":23,"column_start":13,"expansion":null,"file_name":"src\\core\\plugin\\traits.rs","is_primary":true,"label":"move occurs because `self.state` has type `plugin::traits::PluginState`, which does not implement the `Copy` trait","line_end":212,"line_start":212,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":13,"text":"            self.state"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0046, E0053, E0277, E0308, E0407, E0433, E0507, E0596, E0599.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0046, E0053, E0277, E0308, E0407, E0433, E0507, E0596, E0599.","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust#eventghost@0.1.0","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0046`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0046`.","spans":[]}}
{"reason":"build-finished","success":false}
